// This file is generated by Tools/cases_generator/uop_metadata_generator.py
// from:
//   Python/bytecodes.c
// Do not edit!

#ifndef Py_CORE_UOP_METADATA_H
#define Py_CORE_UOP_METADATA_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "pycore_uop_ids.h"
#define UOP_REGISTERS_COUNT 3

extern const uint16_t _PyUop_Flags[MAX_UOP_ID+1];
extern const uint8_t _PyUop_Replication[MAX_UOP_ID+1];
extern const char * const _PyOpcode_uop_name[MAX_UOP_ID+1];

#ifdef NEED_OPCODE_METADATA
const uint16_t _PyUop_Flags[MAX_UOP_ID+1] = {
    [_NOP] = HAS_PURE_FLAG,
    [_RESUME_CHECK] = HAS_DEOPT_FLAG,
    [_LOAD_FAST_CHECK] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_0] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_1] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_2] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_3] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_4] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_5] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_6] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_7] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_AND_CLEAR] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_LOAD_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_CONST] = HAS_ARG_FLAG | HAS_CONST_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_0] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_1] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_2] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_3] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_4] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_5] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_6] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_7] = HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_LOAD_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_FAST_STORE_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_POP_TOP] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_PUSH_NULL] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_END_SEND] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNARY_NEGATIVE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNARY_NOT] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL_BOOL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL_INT] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL_LIST] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL_NONE] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_TO_BOOL_STR] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_REPLACE_WITH_TRUE] = HAS_REGISTER_VERSION_FLAG,
    [_UNARY_INVERT] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_BOTH_INT] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_MULTIPLY_INT] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_ADD_INT] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_SUBTRACT_INT] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_BOTH_FLOAT] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_MULTIPLY_FLOAT] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_ADD_FLOAT] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_SUBTRACT_FLOAT] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_BOTH_UNICODE] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP_ADD_UNICODE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SUBSCR] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SLICE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_SLICE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SUBSCR_LIST_INT] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SUBSCR_STR_INT] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SUBSCR_TUPLE_INT] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_SUBSCR_DICT] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LIST_APPEND] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_SET_ADD] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_SUBSCR] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_SUBSCR_LIST_INT] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_SUBSCR_DICT] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DELETE_SUBSCR] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_INTRINSIC_1] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_INTRINSIC_2] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_POP_FRAME] = HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GET_AITER] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GET_ANEXT] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GET_AWAITABLE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_POP_EXCEPT] = HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ASSERTION_ERROR] = HAS_REGISTER_VERSION_FLAG,
    [_LOAD_BUILD_CLASS] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_NAME] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DELETE_NAME] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_UNPACK_SEQUENCE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNPACK_SEQUENCE_TWO_TUPLE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNPACK_SEQUENCE_TUPLE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNPACK_SEQUENCE_LIST] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_UNPACK_EX] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_ATTR] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DELETE_ATTR] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DELETE_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_LOAD_LOCALS] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FROM_DICT_OR_GLOBALS] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_NAME] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_GLOBAL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_GLOBALS_VERSION] = HAS_DEOPT_FLAG,
    [_GUARD_BUILTINS_VERSION] = HAS_DEOPT_FLAG,
    [_LOAD_GLOBAL_MODULE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_GLOBAL_BUILTINS] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DELETE_FAST] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG,
    [_MAKE_CELL] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_DELETE_DEREF] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_LOAD_FROM_DICT_OR_DEREF] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_DEREF] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_DEREF] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COPY_FREE_VARS] = HAS_ARG_FLAG,
    [_BUILD_STRING] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BUILD_TUPLE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BUILD_LIST] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LIST_EXTEND] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_SET_UPDATE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BUILD_SET] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BUILD_MAP] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_SETUP_ANNOTATIONS] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_BUILD_CONST_KEY_MAP] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DICT_UPDATE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_DICT_MERGE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_MAP_ADD] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_SUPER_ATTR_ATTR] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_SUPER_ATTR_METHOD] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_TYPE_VERSION] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_0] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_1] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_ATTR_MODULE] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_MODULE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_ATTR_WITH_HINT] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_WITH_HINT] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_SLOT_0] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_SLOT_1] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_SLOT] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_ATTR_CLASS] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_CLASS_0] = HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_CLASS_1] = HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_CLASS] = HAS_ARG_FLAG | HAS_OPARG_AND_1_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_DORV_VALUES] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_ATTR_INSTANCE_VALUE] = HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_STORE_ATTR_SLOT] = HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COMPARE_OP] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COMPARE_OP_FLOAT] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COMPARE_OP_INT] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COMPARE_OP_STR] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_IS_OP] = HAS_ARG_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CONTAINS_OP] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CONTAINS_OP_SET] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CONTAINS_OP_DICT] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_EG_MATCH] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_EXC_MATCH] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_IS_NONE] = HAS_REGISTER_VERSION_FLAG,
    [_GET_LEN] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_MATCH_CLASS] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_MATCH_MAPPING] = HAS_REGISTER_VERSION_FLAG,
    [_MATCH_SEQUENCE] = HAS_REGISTER_VERSION_FLAG,
    [_MATCH_KEYS] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GET_ITER] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GET_YIELD_FROM_ITER] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_FOR_ITER_TIER_TWO] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_ITER_CHECK_LIST] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_NOT_EXHAUSTED_LIST] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_ITER_NEXT_LIST] = HAS_REGISTER_VERSION_FLAG,
    [_ITER_CHECK_TUPLE] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_NOT_EXHAUSTED_TUPLE] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_ITER_NEXT_TUPLE] = HAS_REGISTER_VERSION_FLAG,
    [_ITER_CHECK_RANGE] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_NOT_EXHAUSTED_RANGE] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_ITER_NEXT_RANGE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BEFORE_ASYNC_WITH] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BEFORE_WITH] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_WITH_EXCEPT_START] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_PUSH_EXC_INFO] = HAS_REGISTER_VERSION_FLAG,
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_KEYS_VERSION] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_METHOD_WITH_VALUES] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_METHOD_NO_DICT] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = HAS_ARG_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = HAS_ARG_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_ATTR_METHOD_LAZY_DICT] = HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_ATTR_METHOD_LAZY_DICT] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = HAS_ARG_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_PEP_523] = HAS_DEOPT_FLAG,
    [_CHECK_FUNCTION_EXACT_ARGS] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_STACK_SPACE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_0] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_1] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_2] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_3] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_4] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_PUSH_FRAME] = HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_TYPE_1] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_STR_1] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_TUPLE_1] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_EXIT_INIT_CHECK] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_BUILTIN_CLASS] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_BUILTIN_O] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_BUILTIN_FAST] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_LEN] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_ISINSTANCE] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_METHOD_DESCRIPTOR_O] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_MAKE_FUNCTION] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_SET_FUNCTION_ATTRIBUTE] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BUILD_SLICE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CONVERT_VALUE] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_FORMAT_SIMPLE] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_FORMAT_WITH_SPEC] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_COPY] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_BINARY_OP] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_SWAP] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_IS_TRUE_POP] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_IS_FALSE_POP] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_IS_NONE_POP] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_GUARD_IS_NOT_NONE_POP] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_JUMP_TO_TOP] = HAS_EVAL_BREAK_FLAG,
    [_SET_IP] = 0,
    [_SAVE_RETURN_OFFSET] = HAS_ARG_FLAG,
    [_EXIT_TRACE] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG,
    [_CHECK_VALIDITY] = HAS_DEOPT_FLAG,
    [_LOAD_CONST_INLINE] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_CONST_INLINE_BORROW] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_CONST_INLINE_WITH_NULL] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = HAS_PURE_FLAG | HAS_REGISTER_VERSION_FLAG,
    [_CHECK_FUNCTION] = HAS_DEOPT_FLAG,
    [_INTERNAL_INCREMENT_OPT_COUNTER] = HAS_REGISTER_VERSION_FLAG,
    [_COLD_EXIT] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG,
    [_START_EXECUTOR] = 0,
    [_FATAL_ERROR] = HAS_ESCAPES_FLAG,
    [_CHECK_VALIDITY_AND_SET_IP] = HAS_DEOPT_FLAG,
    [_REG_SPILL_0] = HAS_REGISTER_VERSION_FLAG,
    [_REG_SPILL_0_1] = HAS_REGISTER_VERSION_FLAG,
    [_REG_SPILL_0_1_2] = HAS_REGISTER_VERSION_FLAG,
    [_LOAD_FAST_CHECK__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_CHECK__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_0__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_0__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_1__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_1__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_2__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_2__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_3__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_3__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_4__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_4__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_5__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_5__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_6__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_6__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_7__REG] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_7__REG_SPILL] = HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_AND_CLEAR__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_AND_CLEAR__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_LOAD_FAST__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FAST_LOAD_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST__REG] = HAS_ARG_FLAG | HAS_CONST_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST__REG_SPILL] = HAS_ARG_FLAG | HAS_CONST_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_0__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_0__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_1__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_1__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_2__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_2__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_3__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_3__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_4__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_4__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_5__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_5__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_6__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_6__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_7__REG] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_7__REG_SPILL] = HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_LOAD_FAST__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_LOAD_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_STORE_FAST__REG] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_FAST_STORE_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_LOCAL_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_TOP__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_TOP__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_PUSH_NULL__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_PUSH_NULL__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_END_SEND__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_END_SEND__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNARY_NEGATIVE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNARY_NEGATIVE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNARY_NOT__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNARY_NOT__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_BOOL__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_BOOL__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_INT__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_LIST__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_LIST__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_NONE__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_NONE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_STR__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_TO_BOOL_STR__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_REPLACE_WITH_TRUE__REG] = HAS_USES_REGISTER_FLAG,
    [_REPLACE_WITH_TRUE__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_UNARY_INVERT__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNARY_INVERT__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_INT__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_MULTIPLY_INT__REG] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_MULTIPLY_INT__REG_SPILL] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_INT__REG] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_INT__REG_SPILL] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_SUBTRACT_INT__REG] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_SUBTRACT_INT__REG_SPILL] = HAS_ERROR_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_FLOAT__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_FLOAT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_MULTIPLY_FLOAT__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_MULTIPLY_FLOAT__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_FLOAT__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_FLOAT__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_SUBTRACT_FLOAT__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_SUBTRACT_FLOAT__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_UNICODE__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_BOTH_UNICODE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_UNICODE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP_ADD_UNICODE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SLICE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SLICE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SLICE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SLICE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_LIST_INT__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_LIST_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_STR_INT__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_STR_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_TUPLE_INT__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_TUPLE_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_DICT__REG] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_SUBSCR_DICT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LIST_APPEND__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_LIST_APPEND__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_ADD__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_ADD__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR_LIST_INT__REG] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR_LIST_INT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR_DICT__REG] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_SUBSCR_DICT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DELETE_SUBSCR__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DELETE_SUBSCR__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_INTRINSIC_1__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_INTRINSIC_1__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_INTRINSIC_2__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_INTRINSIC_2__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_FRAME__REG] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_FRAME__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_AITER__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_AITER__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_ANEXT__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_ANEXT__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_AWAITABLE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_AWAITABLE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_EXCEPT__REG] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_EXCEPT__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ASSERTION_ERROR__REG] = HAS_USES_REGISTER_FLAG,
    [_LOAD_ASSERTION_ERROR__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_LOAD_BUILD_CLASS__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_BUILD_CLASS__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_NAME__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_NAME__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_TWO_TUPLE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_TUPLE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_TUPLE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_LIST__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_SEQUENCE_LIST__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_EX__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_UNPACK_EX__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DELETE_ATTR__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DELETE_ATTR__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_GLOBAL__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_GLOBAL__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_LOCALS__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_LOCALS__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FROM_DICT_OR_GLOBALS__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_NAME__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_NAME__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL_MODULE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL_MODULE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL_BUILTINS__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_GLOBAL_BUILTINS__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FROM_DICT_OR_DEREF__REG] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_FROM_DICT_OR_DEREF__REG_SPILL] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_DEREF__REG] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_DEREF__REG_SPILL] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_DEREF__REG] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_DEREF__REG_SPILL] = HAS_ARG_FLAG | HAS_FREE_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_STRING__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_STRING__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_TUPLE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_TUPLE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_LIST__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_LIST__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LIST_EXTEND__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LIST_EXTEND__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_UPDATE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_UPDATE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_SET__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_SET__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_MAP__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_MAP__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_CONST_KEY_MAP__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_CONST_KEY_MAP__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DICT_UPDATE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DICT_UPDATE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DICT_MERGE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_DICT_MERGE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MAP_ADD__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MAP_ADD__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_SUPER_ATTR_ATTR__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_SUPER_ATTR_ATTR__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_SUPER_ATTR_METHOD__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_SUPER_ATTR_METHOD__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_TYPE_VERSION__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_TYPE_VERSION__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_MANAGED_OBJECT_HAS_VALUES__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_0__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_1__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_INSTANCE_VALUE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_MODULE__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_MODULE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_MODULE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_MODULE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_WITH_HINT__REG] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_WITH_HINT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_WITH_HINT__REG] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_WITH_HINT__REG_SPILL] = HAS_ARG_FLAG | HAS_NAME_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT_0__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT_0__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT_1__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT_1__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_SLOT__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_CLASS__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_CLASS__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS_0__REG] = HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS_0__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS_1__REG] = HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS_1__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS__REG] = HAS_ARG_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_CLASS__REG_SPILL] = HAS_ARG_FLAG | HAS_OPARG_AND_1_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_DORV_VALUES__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_DORV_VALUES__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR_INSTANCE_VALUE__REG] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR_INSTANCE_VALUE__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR_SLOT__REG] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_STORE_ATTR_SLOT__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_FLOAT__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_FLOAT__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_INT__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_INT__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_STR__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COMPARE_OP_STR__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_IS_OP__REG] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_IS_OP__REG_SPILL] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP_SET__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP_SET__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP_DICT__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONTAINS_OP_DICT__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_EG_MATCH__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_EG_MATCH__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_EXC_MATCH__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_EXC_MATCH__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_IS_NONE__REG] = HAS_USES_REGISTER_FLAG,
    [_IS_NONE__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_GET_LEN__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_LEN__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MATCH_CLASS__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MATCH_CLASS__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MATCH_MAPPING__REG] = HAS_USES_REGISTER_FLAG,
    [_MATCH_MAPPING__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_MATCH_SEQUENCE__REG] = HAS_USES_REGISTER_FLAG,
    [_MATCH_SEQUENCE__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_MATCH_KEYS__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MATCH_KEYS__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_ITER__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_ITER__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_YIELD_FROM_ITER__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_GET_YIELD_FROM_ITER__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_FOR_ITER_TIER_TWO__REG] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_FOR_ITER_TIER_TWO__REG_SPILL] = HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_LIST__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_LIST__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_LIST__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_LIST__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_LIST__REG] = HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_LIST__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_TUPLE__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_TUPLE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_TUPLE__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_TUPLE__REG] = HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_TUPLE__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_RANGE__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_CHECK_RANGE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_RANGE__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_RANGE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_ITER_NEXT_RANGE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BEFORE_ASYNC_WITH__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BEFORE_ASYNC_WITH__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BEFORE_WITH__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BEFORE_WITH__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_WITH_EXCEPT_START__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_WITH_EXCEPT_START__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_PUSH_EXC_INFO__REG] = HAS_USES_REGISTER_FLAG,
    [_PUSH_EXC_INFO__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_KEYS_VERSION__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_KEYS_VERSION__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_WITH_VALUES__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_NO_DICT__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_NO_DICT__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_METHOD_LAZY_DICT__REG] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL] = HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_LAZY_DICT__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL] = HAS_ARG_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_FUNCTION_EXACT_ARGS__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_FUNCTION_EXACT_ARGS__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_STACK_SPACE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CHECK_STACK_SPACE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_0__REG] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_1__REG] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_2__REG] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_3__REG] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_4__REG] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INIT_CALL_PY_EXACT_ARGS__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_PUSH_FRAME__REG] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_PUSH_FRAME__REG_SPILL] = HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_TYPE_1__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_TYPE_1__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_STR_1__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_STR_1__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_TUPLE_1__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_TUPLE_1__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_EXIT_INIT_CHECK__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_EXIT_INIT_CHECK__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_CLASS__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_CLASS__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_O__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_O__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_FAST__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_LEN__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_LEN__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_ISINSTANCE__REG] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_ISINSTANCE__REG_SPILL] = HAS_ARG_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_O__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_O__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_NOARGS__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST__REG] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL] = HAS_ARG_FLAG | HAS_EVAL_BREAK_FLAG | HAS_DEOPT_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MAKE_FUNCTION__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_MAKE_FUNCTION__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_FUNCTION_ATTRIBUTE__REG] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_SET_FUNCTION_ATTRIBUTE__REG_SPILL] = HAS_ARG_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_SLICE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_BUILD_SLICE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONVERT_VALUE__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_CONVERT_VALUE__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_FORMAT_SIMPLE__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_FORMAT_SIMPLE__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_FORMAT_WITH_SPEC__REG] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_FORMAT_WITH_SPEC__REG_SPILL] = HAS_ERROR_FLAG | HAS_ESCAPES_FLAG | HAS_USES_REGISTER_FLAG,
    [_COPY__REG] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_COPY__REG_SPILL] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP__REG] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_BINARY_OP__REG_SPILL] = HAS_ARG_FLAG | HAS_ERROR_FLAG | HAS_USES_REGISTER_FLAG,
    [_SWAP__REG] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_SWAP__REG_SPILL] = HAS_ARG_FLAG | HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_TRUE_POP__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_TRUE_POP__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_FALSE_POP__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_FALSE_POP__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_NONE_POP__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_NONE_POP__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_NOT_NONE_POP__REG] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_GUARD_IS_NOT_NONE_POP__REG_SPILL] = HAS_DEOPT_FLAG | HAS_EXIT_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_BORROW__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_BORROW__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_TOP_LOAD_CONST_INLINE_BORROW__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_WITH_NULL__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_WITH_NULL__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL] = HAS_PURE_FLAG | HAS_USES_REGISTER_FLAG,
    [_INTERNAL_INCREMENT_OPT_COUNTER__REG] = HAS_USES_REGISTER_FLAG,
    [_INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0__REG] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0_1__REG] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0_1__REG_SPILL] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0_1_2__REG] = HAS_USES_REGISTER_FLAG,
    [_REG_SPILL_0_1_2__REG_SPILL] = HAS_USES_REGISTER_FLAG,
};

const uint8_t _PyUop_Replication[MAX_UOP_ID+1] = {
    [_LOAD_FAST] = 8,
    [_STORE_FAST] = 8,
    [_INIT_CALL_PY_EXACT_ARGS] = 5,
};

const char *const _PyOpcode_uop_name[MAX_UOP_ID+1] = {
    [_BEFORE_ASYNC_WITH] = "_BEFORE_ASYNC_WITH",
    [_BEFORE_ASYNC_WITH__REG] = "_BEFORE_ASYNC_WITH__REG",
    [_BEFORE_ASYNC_WITH__REG_SPILL] = "_BEFORE_ASYNC_WITH__REG_SPILL",
    [_BEFORE_WITH] = "_BEFORE_WITH",
    [_BEFORE_WITH__REG] = "_BEFORE_WITH__REG",
    [_BEFORE_WITH__REG_SPILL] = "_BEFORE_WITH__REG_SPILL",
    [_BINARY_OP] = "_BINARY_OP",
    [_BINARY_OP_ADD_FLOAT] = "_BINARY_OP_ADD_FLOAT",
    [_BINARY_OP_ADD_FLOAT__REG] = "_BINARY_OP_ADD_FLOAT__REG",
    [_BINARY_OP_ADD_FLOAT__REG_SPILL] = "_BINARY_OP_ADD_FLOAT__REG_SPILL",
    [_BINARY_OP_ADD_INT] = "_BINARY_OP_ADD_INT",
    [_BINARY_OP_ADD_INT__REG] = "_BINARY_OP_ADD_INT__REG",
    [_BINARY_OP_ADD_INT__REG_SPILL] = "_BINARY_OP_ADD_INT__REG_SPILL",
    [_BINARY_OP_ADD_UNICODE] = "_BINARY_OP_ADD_UNICODE",
    [_BINARY_OP_ADD_UNICODE__REG] = "_BINARY_OP_ADD_UNICODE__REG",
    [_BINARY_OP_ADD_UNICODE__REG_SPILL] = "_BINARY_OP_ADD_UNICODE__REG_SPILL",
    [_BINARY_OP_MULTIPLY_FLOAT] = "_BINARY_OP_MULTIPLY_FLOAT",
    [_BINARY_OP_MULTIPLY_FLOAT__REG] = "_BINARY_OP_MULTIPLY_FLOAT__REG",
    [_BINARY_OP_MULTIPLY_FLOAT__REG_SPILL] = "_BINARY_OP_MULTIPLY_FLOAT__REG_SPILL",
    [_BINARY_OP_MULTIPLY_INT] = "_BINARY_OP_MULTIPLY_INT",
    [_BINARY_OP_MULTIPLY_INT__REG] = "_BINARY_OP_MULTIPLY_INT__REG",
    [_BINARY_OP_MULTIPLY_INT__REG_SPILL] = "_BINARY_OP_MULTIPLY_INT__REG_SPILL",
    [_BINARY_OP_SUBTRACT_FLOAT] = "_BINARY_OP_SUBTRACT_FLOAT",
    [_BINARY_OP_SUBTRACT_FLOAT__REG] = "_BINARY_OP_SUBTRACT_FLOAT__REG",
    [_BINARY_OP_SUBTRACT_FLOAT__REG_SPILL] = "_BINARY_OP_SUBTRACT_FLOAT__REG_SPILL",
    [_BINARY_OP_SUBTRACT_INT] = "_BINARY_OP_SUBTRACT_INT",
    [_BINARY_OP_SUBTRACT_INT__REG] = "_BINARY_OP_SUBTRACT_INT__REG",
    [_BINARY_OP_SUBTRACT_INT__REG_SPILL] = "_BINARY_OP_SUBTRACT_INT__REG_SPILL",
    [_BINARY_OP__REG] = "_BINARY_OP__REG",
    [_BINARY_OP__REG_SPILL] = "_BINARY_OP__REG_SPILL",
    [_BINARY_SLICE] = "_BINARY_SLICE",
    [_BINARY_SLICE__REG] = "_BINARY_SLICE__REG",
    [_BINARY_SLICE__REG_SPILL] = "_BINARY_SLICE__REG_SPILL",
    [_BINARY_SUBSCR] = "_BINARY_SUBSCR",
    [_BINARY_SUBSCR_DICT] = "_BINARY_SUBSCR_DICT",
    [_BINARY_SUBSCR_DICT__REG] = "_BINARY_SUBSCR_DICT__REG",
    [_BINARY_SUBSCR_DICT__REG_SPILL] = "_BINARY_SUBSCR_DICT__REG_SPILL",
    [_BINARY_SUBSCR_LIST_INT] = "_BINARY_SUBSCR_LIST_INT",
    [_BINARY_SUBSCR_LIST_INT__REG] = "_BINARY_SUBSCR_LIST_INT__REG",
    [_BINARY_SUBSCR_LIST_INT__REG_SPILL] = "_BINARY_SUBSCR_LIST_INT__REG_SPILL",
    [_BINARY_SUBSCR_STR_INT] = "_BINARY_SUBSCR_STR_INT",
    [_BINARY_SUBSCR_STR_INT__REG] = "_BINARY_SUBSCR_STR_INT__REG",
    [_BINARY_SUBSCR_STR_INT__REG_SPILL] = "_BINARY_SUBSCR_STR_INT__REG_SPILL",
    [_BINARY_SUBSCR_TUPLE_INT] = "_BINARY_SUBSCR_TUPLE_INT",
    [_BINARY_SUBSCR_TUPLE_INT__REG] = "_BINARY_SUBSCR_TUPLE_INT__REG",
    [_BINARY_SUBSCR_TUPLE_INT__REG_SPILL] = "_BINARY_SUBSCR_TUPLE_INT__REG_SPILL",
    [_BINARY_SUBSCR__REG] = "_BINARY_SUBSCR__REG",
    [_BINARY_SUBSCR__REG_SPILL] = "_BINARY_SUBSCR__REG_SPILL",
    [_BUILD_CONST_KEY_MAP] = "_BUILD_CONST_KEY_MAP",
    [_BUILD_CONST_KEY_MAP__REG] = "_BUILD_CONST_KEY_MAP__REG",
    [_BUILD_CONST_KEY_MAP__REG_SPILL] = "_BUILD_CONST_KEY_MAP__REG_SPILL",
    [_BUILD_LIST] = "_BUILD_LIST",
    [_BUILD_LIST__REG] = "_BUILD_LIST__REG",
    [_BUILD_LIST__REG_SPILL] = "_BUILD_LIST__REG_SPILL",
    [_BUILD_MAP] = "_BUILD_MAP",
    [_BUILD_MAP__REG] = "_BUILD_MAP__REG",
    [_BUILD_MAP__REG_SPILL] = "_BUILD_MAP__REG_SPILL",
    [_BUILD_SET] = "_BUILD_SET",
    [_BUILD_SET__REG] = "_BUILD_SET__REG",
    [_BUILD_SET__REG_SPILL] = "_BUILD_SET__REG_SPILL",
    [_BUILD_SLICE] = "_BUILD_SLICE",
    [_BUILD_SLICE__REG] = "_BUILD_SLICE__REG",
    [_BUILD_SLICE__REG_SPILL] = "_BUILD_SLICE__REG_SPILL",
    [_BUILD_STRING] = "_BUILD_STRING",
    [_BUILD_STRING__REG] = "_BUILD_STRING__REG",
    [_BUILD_STRING__REG_SPILL] = "_BUILD_STRING__REG_SPILL",
    [_BUILD_TUPLE] = "_BUILD_TUPLE",
    [_BUILD_TUPLE__REG] = "_BUILD_TUPLE__REG",
    [_BUILD_TUPLE__REG_SPILL] = "_BUILD_TUPLE__REG_SPILL",
    [_CALL_BUILTIN_CLASS] = "_CALL_BUILTIN_CLASS",
    [_CALL_BUILTIN_CLASS__REG] = "_CALL_BUILTIN_CLASS__REG",
    [_CALL_BUILTIN_CLASS__REG_SPILL] = "_CALL_BUILTIN_CLASS__REG_SPILL",
    [_CALL_BUILTIN_FAST] = "_CALL_BUILTIN_FAST",
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = "_CALL_BUILTIN_FAST_WITH_KEYWORDS",
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG] = "_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG",
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL] = "_CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL",
    [_CALL_BUILTIN_FAST__REG] = "_CALL_BUILTIN_FAST__REG",
    [_CALL_BUILTIN_FAST__REG_SPILL] = "_CALL_BUILTIN_FAST__REG_SPILL",
    [_CALL_BUILTIN_O] = "_CALL_BUILTIN_O",
    [_CALL_BUILTIN_O__REG] = "_CALL_BUILTIN_O__REG",
    [_CALL_BUILTIN_O__REG_SPILL] = "_CALL_BUILTIN_O__REG_SPILL",
    [_CALL_INTRINSIC_1] = "_CALL_INTRINSIC_1",
    [_CALL_INTRINSIC_1__REG] = "_CALL_INTRINSIC_1__REG",
    [_CALL_INTRINSIC_1__REG_SPILL] = "_CALL_INTRINSIC_1__REG_SPILL",
    [_CALL_INTRINSIC_2] = "_CALL_INTRINSIC_2",
    [_CALL_INTRINSIC_2__REG] = "_CALL_INTRINSIC_2__REG",
    [_CALL_INTRINSIC_2__REG_SPILL] = "_CALL_INTRINSIC_2__REG_SPILL",
    [_CALL_ISINSTANCE] = "_CALL_ISINSTANCE",
    [_CALL_ISINSTANCE__REG] = "_CALL_ISINSTANCE__REG",
    [_CALL_ISINSTANCE__REG_SPILL] = "_CALL_ISINSTANCE__REG_SPILL",
    [_CALL_LEN] = "_CALL_LEN",
    [_CALL_LEN__REG] = "_CALL_LEN__REG",
    [_CALL_LEN__REG_SPILL] = "_CALL_LEN__REG_SPILL",
    [_CALL_METHOD_DESCRIPTOR_FAST] = "_CALL_METHOD_DESCRIPTOR_FAST",
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = "_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS",
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG] = "_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG",
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL] = "_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL",
    [_CALL_METHOD_DESCRIPTOR_FAST__REG] = "_CALL_METHOD_DESCRIPTOR_FAST__REG",
    [_CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL] = "_CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL",
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = "_CALL_METHOD_DESCRIPTOR_NOARGS",
    [_CALL_METHOD_DESCRIPTOR_NOARGS__REG] = "_CALL_METHOD_DESCRIPTOR_NOARGS__REG",
    [_CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL] = "_CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL",
    [_CALL_METHOD_DESCRIPTOR_O] = "_CALL_METHOD_DESCRIPTOR_O",
    [_CALL_METHOD_DESCRIPTOR_O__REG] = "_CALL_METHOD_DESCRIPTOR_O__REG",
    [_CALL_METHOD_DESCRIPTOR_O__REG_SPILL] = "_CALL_METHOD_DESCRIPTOR_O__REG_SPILL",
    [_CALL_STR_1] = "_CALL_STR_1",
    [_CALL_STR_1__REG] = "_CALL_STR_1__REG",
    [_CALL_STR_1__REG_SPILL] = "_CALL_STR_1__REG_SPILL",
    [_CALL_TUPLE_1] = "_CALL_TUPLE_1",
    [_CALL_TUPLE_1__REG] = "_CALL_TUPLE_1__REG",
    [_CALL_TUPLE_1__REG_SPILL] = "_CALL_TUPLE_1__REG_SPILL",
    [_CALL_TYPE_1] = "_CALL_TYPE_1",
    [_CALL_TYPE_1__REG] = "_CALL_TYPE_1__REG",
    [_CALL_TYPE_1__REG_SPILL] = "_CALL_TYPE_1__REG_SPILL",
    [_CHECK_ATTR_CLASS] = "_CHECK_ATTR_CLASS",
    [_CHECK_ATTR_CLASS__REG] = "_CHECK_ATTR_CLASS__REG",
    [_CHECK_ATTR_CLASS__REG_SPILL] = "_CHECK_ATTR_CLASS__REG_SPILL",
    [_CHECK_ATTR_METHOD_LAZY_DICT] = "_CHECK_ATTR_METHOD_LAZY_DICT",
    [_CHECK_ATTR_METHOD_LAZY_DICT__REG] = "_CHECK_ATTR_METHOD_LAZY_DICT__REG",
    [_CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL] = "_CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL",
    [_CHECK_ATTR_MODULE] = "_CHECK_ATTR_MODULE",
    [_CHECK_ATTR_MODULE__REG] = "_CHECK_ATTR_MODULE__REG",
    [_CHECK_ATTR_MODULE__REG_SPILL] = "_CHECK_ATTR_MODULE__REG_SPILL",
    [_CHECK_ATTR_WITH_HINT] = "_CHECK_ATTR_WITH_HINT",
    [_CHECK_ATTR_WITH_HINT__REG] = "_CHECK_ATTR_WITH_HINT__REG",
    [_CHECK_ATTR_WITH_HINT__REG_SPILL] = "_CHECK_ATTR_WITH_HINT__REG_SPILL",
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = "_CHECK_CALL_BOUND_METHOD_EXACT_ARGS",
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG] = "_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG",
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL] = "_CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL",
    [_CHECK_EG_MATCH] = "_CHECK_EG_MATCH",
    [_CHECK_EG_MATCH__REG] = "_CHECK_EG_MATCH__REG",
    [_CHECK_EG_MATCH__REG_SPILL] = "_CHECK_EG_MATCH__REG_SPILL",
    [_CHECK_EXC_MATCH] = "_CHECK_EXC_MATCH",
    [_CHECK_EXC_MATCH__REG] = "_CHECK_EXC_MATCH__REG",
    [_CHECK_EXC_MATCH__REG_SPILL] = "_CHECK_EXC_MATCH__REG_SPILL",
    [_CHECK_FUNCTION] = "_CHECK_FUNCTION",
    [_CHECK_FUNCTION_EXACT_ARGS] = "_CHECK_FUNCTION_EXACT_ARGS",
    [_CHECK_FUNCTION_EXACT_ARGS__REG] = "_CHECK_FUNCTION_EXACT_ARGS__REG",
    [_CHECK_FUNCTION_EXACT_ARGS__REG_SPILL] = "_CHECK_FUNCTION_EXACT_ARGS__REG_SPILL",
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = "_CHECK_MANAGED_OBJECT_HAS_VALUES",
    [_CHECK_MANAGED_OBJECT_HAS_VALUES__REG] = "_CHECK_MANAGED_OBJECT_HAS_VALUES__REG",
    [_CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL] = "_CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL",
    [_CHECK_PEP_523] = "_CHECK_PEP_523",
    [_CHECK_STACK_SPACE] = "_CHECK_STACK_SPACE",
    [_CHECK_STACK_SPACE__REG] = "_CHECK_STACK_SPACE__REG",
    [_CHECK_STACK_SPACE__REG_SPILL] = "_CHECK_STACK_SPACE__REG_SPILL",
    [_CHECK_VALIDITY] = "_CHECK_VALIDITY",
    [_CHECK_VALIDITY_AND_SET_IP] = "_CHECK_VALIDITY_AND_SET_IP",
    [_COLD_EXIT] = "_COLD_EXIT",
    [_COMPARE_OP] = "_COMPARE_OP",
    [_COMPARE_OP_FLOAT] = "_COMPARE_OP_FLOAT",
    [_COMPARE_OP_FLOAT__REG] = "_COMPARE_OP_FLOAT__REG",
    [_COMPARE_OP_FLOAT__REG_SPILL] = "_COMPARE_OP_FLOAT__REG_SPILL",
    [_COMPARE_OP_INT] = "_COMPARE_OP_INT",
    [_COMPARE_OP_INT__REG] = "_COMPARE_OP_INT__REG",
    [_COMPARE_OP_INT__REG_SPILL] = "_COMPARE_OP_INT__REG_SPILL",
    [_COMPARE_OP_STR] = "_COMPARE_OP_STR",
    [_COMPARE_OP_STR__REG] = "_COMPARE_OP_STR__REG",
    [_COMPARE_OP_STR__REG_SPILL] = "_COMPARE_OP_STR__REG_SPILL",
    [_COMPARE_OP__REG] = "_COMPARE_OP__REG",
    [_COMPARE_OP__REG_SPILL] = "_COMPARE_OP__REG_SPILL",
    [_CONTAINS_OP] = "_CONTAINS_OP",
    [_CONTAINS_OP_DICT] = "_CONTAINS_OP_DICT",
    [_CONTAINS_OP_DICT__REG] = "_CONTAINS_OP_DICT__REG",
    [_CONTAINS_OP_DICT__REG_SPILL] = "_CONTAINS_OP_DICT__REG_SPILL",
    [_CONTAINS_OP_SET] = "_CONTAINS_OP_SET",
    [_CONTAINS_OP_SET__REG] = "_CONTAINS_OP_SET__REG",
    [_CONTAINS_OP_SET__REG_SPILL] = "_CONTAINS_OP_SET__REG_SPILL",
    [_CONTAINS_OP__REG] = "_CONTAINS_OP__REG",
    [_CONTAINS_OP__REG_SPILL] = "_CONTAINS_OP__REG_SPILL",
    [_CONVERT_VALUE] = "_CONVERT_VALUE",
    [_CONVERT_VALUE__REG] = "_CONVERT_VALUE__REG",
    [_CONVERT_VALUE__REG_SPILL] = "_CONVERT_VALUE__REG_SPILL",
    [_COPY] = "_COPY",
    [_COPY_FREE_VARS] = "_COPY_FREE_VARS",
    [_COPY__REG] = "_COPY__REG",
    [_COPY__REG_SPILL] = "_COPY__REG_SPILL",
    [_DELETE_ATTR] = "_DELETE_ATTR",
    [_DELETE_ATTR__REG] = "_DELETE_ATTR__REG",
    [_DELETE_ATTR__REG_SPILL] = "_DELETE_ATTR__REG_SPILL",
    [_DELETE_DEREF] = "_DELETE_DEREF",
    [_DELETE_FAST] = "_DELETE_FAST",
    [_DELETE_GLOBAL] = "_DELETE_GLOBAL",
    [_DELETE_NAME] = "_DELETE_NAME",
    [_DELETE_SUBSCR] = "_DELETE_SUBSCR",
    [_DELETE_SUBSCR__REG] = "_DELETE_SUBSCR__REG",
    [_DELETE_SUBSCR__REG_SPILL] = "_DELETE_SUBSCR__REG_SPILL",
    [_DICT_MERGE] = "_DICT_MERGE",
    [_DICT_MERGE__REG] = "_DICT_MERGE__REG",
    [_DICT_MERGE__REG_SPILL] = "_DICT_MERGE__REG_SPILL",
    [_DICT_UPDATE] = "_DICT_UPDATE",
    [_DICT_UPDATE__REG] = "_DICT_UPDATE__REG",
    [_DICT_UPDATE__REG_SPILL] = "_DICT_UPDATE__REG_SPILL",
    [_END_SEND] = "_END_SEND",
    [_END_SEND__REG] = "_END_SEND__REG",
    [_END_SEND__REG_SPILL] = "_END_SEND__REG_SPILL",
    [_EXIT_INIT_CHECK] = "_EXIT_INIT_CHECK",
    [_EXIT_INIT_CHECK__REG] = "_EXIT_INIT_CHECK__REG",
    [_EXIT_INIT_CHECK__REG_SPILL] = "_EXIT_INIT_CHECK__REG_SPILL",
    [_EXIT_TRACE] = "_EXIT_TRACE",
    [_FATAL_ERROR] = "_FATAL_ERROR",
    [_FORMAT_SIMPLE] = "_FORMAT_SIMPLE",
    [_FORMAT_SIMPLE__REG] = "_FORMAT_SIMPLE__REG",
    [_FORMAT_SIMPLE__REG_SPILL] = "_FORMAT_SIMPLE__REG_SPILL",
    [_FORMAT_WITH_SPEC] = "_FORMAT_WITH_SPEC",
    [_FORMAT_WITH_SPEC__REG] = "_FORMAT_WITH_SPEC__REG",
    [_FORMAT_WITH_SPEC__REG_SPILL] = "_FORMAT_WITH_SPEC__REG_SPILL",
    [_FOR_ITER_TIER_TWO] = "_FOR_ITER_TIER_TWO",
    [_FOR_ITER_TIER_TWO__REG] = "_FOR_ITER_TIER_TWO__REG",
    [_FOR_ITER_TIER_TWO__REG_SPILL] = "_FOR_ITER_TIER_TWO__REG_SPILL",
    [_GET_AITER] = "_GET_AITER",
    [_GET_AITER__REG] = "_GET_AITER__REG",
    [_GET_AITER__REG_SPILL] = "_GET_AITER__REG_SPILL",
    [_GET_ANEXT] = "_GET_ANEXT",
    [_GET_ANEXT__REG] = "_GET_ANEXT__REG",
    [_GET_ANEXT__REG_SPILL] = "_GET_ANEXT__REG_SPILL",
    [_GET_AWAITABLE] = "_GET_AWAITABLE",
    [_GET_AWAITABLE__REG] = "_GET_AWAITABLE__REG",
    [_GET_AWAITABLE__REG_SPILL] = "_GET_AWAITABLE__REG_SPILL",
    [_GET_ITER] = "_GET_ITER",
    [_GET_ITER__REG] = "_GET_ITER__REG",
    [_GET_ITER__REG_SPILL] = "_GET_ITER__REG_SPILL",
    [_GET_LEN] = "_GET_LEN",
    [_GET_LEN__REG] = "_GET_LEN__REG",
    [_GET_LEN__REG_SPILL] = "_GET_LEN__REG_SPILL",
    [_GET_YIELD_FROM_ITER] = "_GET_YIELD_FROM_ITER",
    [_GET_YIELD_FROM_ITER__REG] = "_GET_YIELD_FROM_ITER__REG",
    [_GET_YIELD_FROM_ITER__REG_SPILL] = "_GET_YIELD_FROM_ITER__REG_SPILL",
    [_GUARD_BOTH_FLOAT] = "_GUARD_BOTH_FLOAT",
    [_GUARD_BOTH_FLOAT__REG] = "_GUARD_BOTH_FLOAT__REG",
    [_GUARD_BOTH_FLOAT__REG_SPILL] = "_GUARD_BOTH_FLOAT__REG_SPILL",
    [_GUARD_BOTH_INT] = "_GUARD_BOTH_INT",
    [_GUARD_BOTH_INT__REG] = "_GUARD_BOTH_INT__REG",
    [_GUARD_BOTH_INT__REG_SPILL] = "_GUARD_BOTH_INT__REG_SPILL",
    [_GUARD_BOTH_UNICODE] = "_GUARD_BOTH_UNICODE",
    [_GUARD_BOTH_UNICODE__REG] = "_GUARD_BOTH_UNICODE__REG",
    [_GUARD_BOTH_UNICODE__REG_SPILL] = "_GUARD_BOTH_UNICODE__REG_SPILL",
    [_GUARD_BUILTINS_VERSION] = "_GUARD_BUILTINS_VERSION",
    [_GUARD_DORV_VALUES] = "_GUARD_DORV_VALUES",
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = "_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT",
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG] = "_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG",
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL] = "_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL",
    [_GUARD_DORV_VALUES__REG] = "_GUARD_DORV_VALUES__REG",
    [_GUARD_DORV_VALUES__REG_SPILL] = "_GUARD_DORV_VALUES__REG_SPILL",
    [_GUARD_GLOBALS_VERSION] = "_GUARD_GLOBALS_VERSION",
    [_GUARD_IS_FALSE_POP] = "_GUARD_IS_FALSE_POP",
    [_GUARD_IS_FALSE_POP__REG] = "_GUARD_IS_FALSE_POP__REG",
    [_GUARD_IS_FALSE_POP__REG_SPILL] = "_GUARD_IS_FALSE_POP__REG_SPILL",
    [_GUARD_IS_NONE_POP] = "_GUARD_IS_NONE_POP",
    [_GUARD_IS_NONE_POP__REG] = "_GUARD_IS_NONE_POP__REG",
    [_GUARD_IS_NONE_POP__REG_SPILL] = "_GUARD_IS_NONE_POP__REG_SPILL",
    [_GUARD_IS_NOT_NONE_POP] = "_GUARD_IS_NOT_NONE_POP",
    [_GUARD_IS_NOT_NONE_POP__REG] = "_GUARD_IS_NOT_NONE_POP__REG",
    [_GUARD_IS_NOT_NONE_POP__REG_SPILL] = "_GUARD_IS_NOT_NONE_POP__REG_SPILL",
    [_GUARD_IS_TRUE_POP] = "_GUARD_IS_TRUE_POP",
    [_GUARD_IS_TRUE_POP__REG] = "_GUARD_IS_TRUE_POP__REG",
    [_GUARD_IS_TRUE_POP__REG_SPILL] = "_GUARD_IS_TRUE_POP__REG_SPILL",
    [_GUARD_KEYS_VERSION] = "_GUARD_KEYS_VERSION",
    [_GUARD_KEYS_VERSION__REG] = "_GUARD_KEYS_VERSION__REG",
    [_GUARD_KEYS_VERSION__REG_SPILL] = "_GUARD_KEYS_VERSION__REG_SPILL",
    [_GUARD_NOT_EXHAUSTED_LIST] = "_GUARD_NOT_EXHAUSTED_LIST",
    [_GUARD_NOT_EXHAUSTED_LIST__REG] = "_GUARD_NOT_EXHAUSTED_LIST__REG",
    [_GUARD_NOT_EXHAUSTED_LIST__REG_SPILL] = "_GUARD_NOT_EXHAUSTED_LIST__REG_SPILL",
    [_GUARD_NOT_EXHAUSTED_RANGE] = "_GUARD_NOT_EXHAUSTED_RANGE",
    [_GUARD_NOT_EXHAUSTED_RANGE__REG] = "_GUARD_NOT_EXHAUSTED_RANGE__REG",
    [_GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL] = "_GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL",
    [_GUARD_NOT_EXHAUSTED_TUPLE] = "_GUARD_NOT_EXHAUSTED_TUPLE",
    [_GUARD_NOT_EXHAUSTED_TUPLE__REG] = "_GUARD_NOT_EXHAUSTED_TUPLE__REG",
    [_GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL] = "_GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL",
    [_GUARD_TYPE_VERSION] = "_GUARD_TYPE_VERSION",
    [_GUARD_TYPE_VERSION__REG] = "_GUARD_TYPE_VERSION__REG",
    [_GUARD_TYPE_VERSION__REG_SPILL] = "_GUARD_TYPE_VERSION__REG_SPILL",
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = "_INIT_CALL_BOUND_METHOD_EXACT_ARGS",
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG] = "_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG",
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL] = "_INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS] = "_INIT_CALL_PY_EXACT_ARGS",
    [_INIT_CALL_PY_EXACT_ARGS_0] = "_INIT_CALL_PY_EXACT_ARGS_0",
    [_INIT_CALL_PY_EXACT_ARGS_0__REG] = "_INIT_CALL_PY_EXACT_ARGS_0__REG",
    [_INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS_1] = "_INIT_CALL_PY_EXACT_ARGS_1",
    [_INIT_CALL_PY_EXACT_ARGS_1__REG] = "_INIT_CALL_PY_EXACT_ARGS_1__REG",
    [_INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS_2] = "_INIT_CALL_PY_EXACT_ARGS_2",
    [_INIT_CALL_PY_EXACT_ARGS_2__REG] = "_INIT_CALL_PY_EXACT_ARGS_2__REG",
    [_INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS_3] = "_INIT_CALL_PY_EXACT_ARGS_3",
    [_INIT_CALL_PY_EXACT_ARGS_3__REG] = "_INIT_CALL_PY_EXACT_ARGS_3__REG",
    [_INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS_4] = "_INIT_CALL_PY_EXACT_ARGS_4",
    [_INIT_CALL_PY_EXACT_ARGS_4__REG] = "_INIT_CALL_PY_EXACT_ARGS_4__REG",
    [_INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL",
    [_INIT_CALL_PY_EXACT_ARGS__REG] = "_INIT_CALL_PY_EXACT_ARGS__REG",
    [_INIT_CALL_PY_EXACT_ARGS__REG_SPILL] = "_INIT_CALL_PY_EXACT_ARGS__REG_SPILL",
    [_INTERNAL_INCREMENT_OPT_COUNTER] = "_INTERNAL_INCREMENT_OPT_COUNTER",
    [_INTERNAL_INCREMENT_OPT_COUNTER__REG] = "_INTERNAL_INCREMENT_OPT_COUNTER__REG",
    [_INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL] = "_INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL",
    [_IS_NONE] = "_IS_NONE",
    [_IS_NONE__REG] = "_IS_NONE__REG",
    [_IS_NONE__REG_SPILL] = "_IS_NONE__REG_SPILL",
    [_IS_OP] = "_IS_OP",
    [_IS_OP__REG] = "_IS_OP__REG",
    [_IS_OP__REG_SPILL] = "_IS_OP__REG_SPILL",
    [_ITER_CHECK_LIST] = "_ITER_CHECK_LIST",
    [_ITER_CHECK_LIST__REG] = "_ITER_CHECK_LIST__REG",
    [_ITER_CHECK_LIST__REG_SPILL] = "_ITER_CHECK_LIST__REG_SPILL",
    [_ITER_CHECK_RANGE] = "_ITER_CHECK_RANGE",
    [_ITER_CHECK_RANGE__REG] = "_ITER_CHECK_RANGE__REG",
    [_ITER_CHECK_RANGE__REG_SPILL] = "_ITER_CHECK_RANGE__REG_SPILL",
    [_ITER_CHECK_TUPLE] = "_ITER_CHECK_TUPLE",
    [_ITER_CHECK_TUPLE__REG] = "_ITER_CHECK_TUPLE__REG",
    [_ITER_CHECK_TUPLE__REG_SPILL] = "_ITER_CHECK_TUPLE__REG_SPILL",
    [_ITER_NEXT_LIST] = "_ITER_NEXT_LIST",
    [_ITER_NEXT_LIST__REG] = "_ITER_NEXT_LIST__REG",
    [_ITER_NEXT_LIST__REG_SPILL] = "_ITER_NEXT_LIST__REG_SPILL",
    [_ITER_NEXT_RANGE] = "_ITER_NEXT_RANGE",
    [_ITER_NEXT_RANGE__REG] = "_ITER_NEXT_RANGE__REG",
    [_ITER_NEXT_RANGE__REG_SPILL] = "_ITER_NEXT_RANGE__REG_SPILL",
    [_ITER_NEXT_TUPLE] = "_ITER_NEXT_TUPLE",
    [_ITER_NEXT_TUPLE__REG] = "_ITER_NEXT_TUPLE__REG",
    [_ITER_NEXT_TUPLE__REG_SPILL] = "_ITER_NEXT_TUPLE__REG_SPILL",
    [_JUMP_TO_TOP] = "_JUMP_TO_TOP",
    [_LIST_APPEND] = "_LIST_APPEND",
    [_LIST_APPEND__REG] = "_LIST_APPEND__REG",
    [_LIST_APPEND__REG_SPILL] = "_LIST_APPEND__REG_SPILL",
    [_LIST_EXTEND] = "_LIST_EXTEND",
    [_LIST_EXTEND__REG] = "_LIST_EXTEND__REG",
    [_LIST_EXTEND__REG_SPILL] = "_LIST_EXTEND__REG_SPILL",
    [_LOAD_ASSERTION_ERROR] = "_LOAD_ASSERTION_ERROR",
    [_LOAD_ASSERTION_ERROR__REG] = "_LOAD_ASSERTION_ERROR__REG",
    [_LOAD_ASSERTION_ERROR__REG_SPILL] = "_LOAD_ASSERTION_ERROR__REG_SPILL",
    [_LOAD_ATTR] = "_LOAD_ATTR",
    [_LOAD_ATTR_CLASS] = "_LOAD_ATTR_CLASS",
    [_LOAD_ATTR_CLASS_0] = "_LOAD_ATTR_CLASS_0",
    [_LOAD_ATTR_CLASS_0__REG] = "_LOAD_ATTR_CLASS_0__REG",
    [_LOAD_ATTR_CLASS_0__REG_SPILL] = "_LOAD_ATTR_CLASS_0__REG_SPILL",
    [_LOAD_ATTR_CLASS_1] = "_LOAD_ATTR_CLASS_1",
    [_LOAD_ATTR_CLASS_1__REG] = "_LOAD_ATTR_CLASS_1__REG",
    [_LOAD_ATTR_CLASS_1__REG_SPILL] = "_LOAD_ATTR_CLASS_1__REG_SPILL",
    [_LOAD_ATTR_CLASS__REG] = "_LOAD_ATTR_CLASS__REG",
    [_LOAD_ATTR_CLASS__REG_SPILL] = "_LOAD_ATTR_CLASS__REG_SPILL",
    [_LOAD_ATTR_INSTANCE_VALUE] = "_LOAD_ATTR_INSTANCE_VALUE",
    [_LOAD_ATTR_INSTANCE_VALUE_0] = "_LOAD_ATTR_INSTANCE_VALUE_0",
    [_LOAD_ATTR_INSTANCE_VALUE_0__REG] = "_LOAD_ATTR_INSTANCE_VALUE_0__REG",
    [_LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL] = "_LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL",
    [_LOAD_ATTR_INSTANCE_VALUE_1] = "_LOAD_ATTR_INSTANCE_VALUE_1",
    [_LOAD_ATTR_INSTANCE_VALUE_1__REG] = "_LOAD_ATTR_INSTANCE_VALUE_1__REG",
    [_LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL] = "_LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL",
    [_LOAD_ATTR_INSTANCE_VALUE__REG] = "_LOAD_ATTR_INSTANCE_VALUE__REG",
    [_LOAD_ATTR_INSTANCE_VALUE__REG_SPILL] = "_LOAD_ATTR_INSTANCE_VALUE__REG_SPILL",
    [_LOAD_ATTR_METHOD_LAZY_DICT] = "_LOAD_ATTR_METHOD_LAZY_DICT",
    [_LOAD_ATTR_METHOD_LAZY_DICT__REG] = "_LOAD_ATTR_METHOD_LAZY_DICT__REG",
    [_LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL] = "_LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL",
    [_LOAD_ATTR_METHOD_NO_DICT] = "_LOAD_ATTR_METHOD_NO_DICT",
    [_LOAD_ATTR_METHOD_NO_DICT__REG] = "_LOAD_ATTR_METHOD_NO_DICT__REG",
    [_LOAD_ATTR_METHOD_NO_DICT__REG_SPILL] = "_LOAD_ATTR_METHOD_NO_DICT__REG_SPILL",
    [_LOAD_ATTR_METHOD_WITH_VALUES] = "_LOAD_ATTR_METHOD_WITH_VALUES",
    [_LOAD_ATTR_METHOD_WITH_VALUES__REG] = "_LOAD_ATTR_METHOD_WITH_VALUES__REG",
    [_LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL] = "_LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL",
    [_LOAD_ATTR_MODULE] = "_LOAD_ATTR_MODULE",
    [_LOAD_ATTR_MODULE__REG] = "_LOAD_ATTR_MODULE__REG",
    [_LOAD_ATTR_MODULE__REG_SPILL] = "_LOAD_ATTR_MODULE__REG_SPILL",
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = "_LOAD_ATTR_NONDESCRIPTOR_NO_DICT",
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG] = "_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG",
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL] = "_LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL",
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = "_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES",
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG] = "_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG",
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL] = "_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL",
    [_LOAD_ATTR_SLOT] = "_LOAD_ATTR_SLOT",
    [_LOAD_ATTR_SLOT_0] = "_LOAD_ATTR_SLOT_0",
    [_LOAD_ATTR_SLOT_0__REG] = "_LOAD_ATTR_SLOT_0__REG",
    [_LOAD_ATTR_SLOT_0__REG_SPILL] = "_LOAD_ATTR_SLOT_0__REG_SPILL",
    [_LOAD_ATTR_SLOT_1] = "_LOAD_ATTR_SLOT_1",
    [_LOAD_ATTR_SLOT_1__REG] = "_LOAD_ATTR_SLOT_1__REG",
    [_LOAD_ATTR_SLOT_1__REG_SPILL] = "_LOAD_ATTR_SLOT_1__REG_SPILL",
    [_LOAD_ATTR_SLOT__REG] = "_LOAD_ATTR_SLOT__REG",
    [_LOAD_ATTR_SLOT__REG_SPILL] = "_LOAD_ATTR_SLOT__REG_SPILL",
    [_LOAD_ATTR_WITH_HINT] = "_LOAD_ATTR_WITH_HINT",
    [_LOAD_ATTR_WITH_HINT__REG] = "_LOAD_ATTR_WITH_HINT__REG",
    [_LOAD_ATTR_WITH_HINT__REG_SPILL] = "_LOAD_ATTR_WITH_HINT__REG_SPILL",
    [_LOAD_ATTR__REG] = "_LOAD_ATTR__REG",
    [_LOAD_ATTR__REG_SPILL] = "_LOAD_ATTR__REG_SPILL",
    [_LOAD_BUILD_CLASS] = "_LOAD_BUILD_CLASS",
    [_LOAD_BUILD_CLASS__REG] = "_LOAD_BUILD_CLASS__REG",
    [_LOAD_BUILD_CLASS__REG_SPILL] = "_LOAD_BUILD_CLASS__REG_SPILL",
    [_LOAD_CONST] = "_LOAD_CONST",
    [_LOAD_CONST_INLINE] = "_LOAD_CONST_INLINE",
    [_LOAD_CONST_INLINE_BORROW] = "_LOAD_CONST_INLINE_BORROW",
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = "_LOAD_CONST_INLINE_BORROW_WITH_NULL",
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG] = "_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG",
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL] = "_LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL",
    [_LOAD_CONST_INLINE_BORROW__REG] = "_LOAD_CONST_INLINE_BORROW__REG",
    [_LOAD_CONST_INLINE_BORROW__REG_SPILL] = "_LOAD_CONST_INLINE_BORROW__REG_SPILL",
    [_LOAD_CONST_INLINE_WITH_NULL] = "_LOAD_CONST_INLINE_WITH_NULL",
    [_LOAD_CONST_INLINE_WITH_NULL__REG] = "_LOAD_CONST_INLINE_WITH_NULL__REG",
    [_LOAD_CONST_INLINE_WITH_NULL__REG_SPILL] = "_LOAD_CONST_INLINE_WITH_NULL__REG_SPILL",
    [_LOAD_CONST_INLINE__REG] = "_LOAD_CONST_INLINE__REG",
    [_LOAD_CONST_INLINE__REG_SPILL] = "_LOAD_CONST_INLINE__REG_SPILL",
    [_LOAD_CONST__REG] = "_LOAD_CONST__REG",
    [_LOAD_CONST__REG_SPILL] = "_LOAD_CONST__REG_SPILL",
    [_LOAD_DEREF] = "_LOAD_DEREF",
    [_LOAD_DEREF__REG] = "_LOAD_DEREF__REG",
    [_LOAD_DEREF__REG_SPILL] = "_LOAD_DEREF__REG_SPILL",
    [_LOAD_FAST] = "_LOAD_FAST",
    [_LOAD_FAST_0] = "_LOAD_FAST_0",
    [_LOAD_FAST_0__REG] = "_LOAD_FAST_0__REG",
    [_LOAD_FAST_0__REG_SPILL] = "_LOAD_FAST_0__REG_SPILL",
    [_LOAD_FAST_1] = "_LOAD_FAST_1",
    [_LOAD_FAST_1__REG] = "_LOAD_FAST_1__REG",
    [_LOAD_FAST_1__REG_SPILL] = "_LOAD_FAST_1__REG_SPILL",
    [_LOAD_FAST_2] = "_LOAD_FAST_2",
    [_LOAD_FAST_2__REG] = "_LOAD_FAST_2__REG",
    [_LOAD_FAST_2__REG_SPILL] = "_LOAD_FAST_2__REG_SPILL",
    [_LOAD_FAST_3] = "_LOAD_FAST_3",
    [_LOAD_FAST_3__REG] = "_LOAD_FAST_3__REG",
    [_LOAD_FAST_3__REG_SPILL] = "_LOAD_FAST_3__REG_SPILL",
    [_LOAD_FAST_4] = "_LOAD_FAST_4",
    [_LOAD_FAST_4__REG] = "_LOAD_FAST_4__REG",
    [_LOAD_FAST_4__REG_SPILL] = "_LOAD_FAST_4__REG_SPILL",
    [_LOAD_FAST_5] = "_LOAD_FAST_5",
    [_LOAD_FAST_5__REG] = "_LOAD_FAST_5__REG",
    [_LOAD_FAST_5__REG_SPILL] = "_LOAD_FAST_5__REG_SPILL",
    [_LOAD_FAST_6] = "_LOAD_FAST_6",
    [_LOAD_FAST_6__REG] = "_LOAD_FAST_6__REG",
    [_LOAD_FAST_6__REG_SPILL] = "_LOAD_FAST_6__REG_SPILL",
    [_LOAD_FAST_7] = "_LOAD_FAST_7",
    [_LOAD_FAST_7__REG] = "_LOAD_FAST_7__REG",
    [_LOAD_FAST_7__REG_SPILL] = "_LOAD_FAST_7__REG_SPILL",
    [_LOAD_FAST_AND_CLEAR] = "_LOAD_FAST_AND_CLEAR",
    [_LOAD_FAST_AND_CLEAR__REG] = "_LOAD_FAST_AND_CLEAR__REG",
    [_LOAD_FAST_AND_CLEAR__REG_SPILL] = "_LOAD_FAST_AND_CLEAR__REG_SPILL",
    [_LOAD_FAST_CHECK] = "_LOAD_FAST_CHECK",
    [_LOAD_FAST_CHECK__REG] = "_LOAD_FAST_CHECK__REG",
    [_LOAD_FAST_CHECK__REG_SPILL] = "_LOAD_FAST_CHECK__REG_SPILL",
    [_LOAD_FAST_LOAD_FAST] = "_LOAD_FAST_LOAD_FAST",
    [_LOAD_FAST_LOAD_FAST__REG] = "_LOAD_FAST_LOAD_FAST__REG",
    [_LOAD_FAST_LOAD_FAST__REG_SPILL] = "_LOAD_FAST_LOAD_FAST__REG_SPILL",
    [_LOAD_FAST__REG] = "_LOAD_FAST__REG",
    [_LOAD_FAST__REG_SPILL] = "_LOAD_FAST__REG_SPILL",
    [_LOAD_FROM_DICT_OR_DEREF] = "_LOAD_FROM_DICT_OR_DEREF",
    [_LOAD_FROM_DICT_OR_DEREF__REG] = "_LOAD_FROM_DICT_OR_DEREF__REG",
    [_LOAD_FROM_DICT_OR_DEREF__REG_SPILL] = "_LOAD_FROM_DICT_OR_DEREF__REG_SPILL",
    [_LOAD_FROM_DICT_OR_GLOBALS] = "_LOAD_FROM_DICT_OR_GLOBALS",
    [_LOAD_FROM_DICT_OR_GLOBALS__REG] = "_LOAD_FROM_DICT_OR_GLOBALS__REG",
    [_LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL] = "_LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL",
    [_LOAD_GLOBAL] = "_LOAD_GLOBAL",
    [_LOAD_GLOBAL_BUILTINS] = "_LOAD_GLOBAL_BUILTINS",
    [_LOAD_GLOBAL_BUILTINS__REG] = "_LOAD_GLOBAL_BUILTINS__REG",
    [_LOAD_GLOBAL_BUILTINS__REG_SPILL] = "_LOAD_GLOBAL_BUILTINS__REG_SPILL",
    [_LOAD_GLOBAL_MODULE] = "_LOAD_GLOBAL_MODULE",
    [_LOAD_GLOBAL_MODULE__REG] = "_LOAD_GLOBAL_MODULE__REG",
    [_LOAD_GLOBAL_MODULE__REG_SPILL] = "_LOAD_GLOBAL_MODULE__REG_SPILL",
    [_LOAD_GLOBAL__REG] = "_LOAD_GLOBAL__REG",
    [_LOAD_GLOBAL__REG_SPILL] = "_LOAD_GLOBAL__REG_SPILL",
    [_LOAD_LOCALS] = "_LOAD_LOCALS",
    [_LOAD_LOCALS__REG] = "_LOAD_LOCALS__REG",
    [_LOAD_LOCALS__REG_SPILL] = "_LOAD_LOCALS__REG_SPILL",
    [_LOAD_NAME] = "_LOAD_NAME",
    [_LOAD_NAME__REG] = "_LOAD_NAME__REG",
    [_LOAD_NAME__REG_SPILL] = "_LOAD_NAME__REG_SPILL",
    [_LOAD_SUPER_ATTR_ATTR] = "_LOAD_SUPER_ATTR_ATTR",
    [_LOAD_SUPER_ATTR_ATTR__REG] = "_LOAD_SUPER_ATTR_ATTR__REG",
    [_LOAD_SUPER_ATTR_ATTR__REG_SPILL] = "_LOAD_SUPER_ATTR_ATTR__REG_SPILL",
    [_LOAD_SUPER_ATTR_METHOD] = "_LOAD_SUPER_ATTR_METHOD",
    [_LOAD_SUPER_ATTR_METHOD__REG] = "_LOAD_SUPER_ATTR_METHOD__REG",
    [_LOAD_SUPER_ATTR_METHOD__REG_SPILL] = "_LOAD_SUPER_ATTR_METHOD__REG_SPILL",
    [_MAKE_CELL] = "_MAKE_CELL",
    [_MAKE_FUNCTION] = "_MAKE_FUNCTION",
    [_MAKE_FUNCTION__REG] = "_MAKE_FUNCTION__REG",
    [_MAKE_FUNCTION__REG_SPILL] = "_MAKE_FUNCTION__REG_SPILL",
    [_MAP_ADD] = "_MAP_ADD",
    [_MAP_ADD__REG] = "_MAP_ADD__REG",
    [_MAP_ADD__REG_SPILL] = "_MAP_ADD__REG_SPILL",
    [_MATCH_CLASS] = "_MATCH_CLASS",
    [_MATCH_CLASS__REG] = "_MATCH_CLASS__REG",
    [_MATCH_CLASS__REG_SPILL] = "_MATCH_CLASS__REG_SPILL",
    [_MATCH_KEYS] = "_MATCH_KEYS",
    [_MATCH_KEYS__REG] = "_MATCH_KEYS__REG",
    [_MATCH_KEYS__REG_SPILL] = "_MATCH_KEYS__REG_SPILL",
    [_MATCH_MAPPING] = "_MATCH_MAPPING",
    [_MATCH_MAPPING__REG] = "_MATCH_MAPPING__REG",
    [_MATCH_MAPPING__REG_SPILL] = "_MATCH_MAPPING__REG_SPILL",
    [_MATCH_SEQUENCE] = "_MATCH_SEQUENCE",
    [_MATCH_SEQUENCE__REG] = "_MATCH_SEQUENCE__REG",
    [_MATCH_SEQUENCE__REG_SPILL] = "_MATCH_SEQUENCE__REG_SPILL",
    [_NOP] = "_NOP",
    [_POP_EXCEPT] = "_POP_EXCEPT",
    [_POP_EXCEPT__REG] = "_POP_EXCEPT__REG",
    [_POP_EXCEPT__REG_SPILL] = "_POP_EXCEPT__REG_SPILL",
    [_POP_FRAME] = "_POP_FRAME",
    [_POP_FRAME__REG] = "_POP_FRAME__REG",
    [_POP_FRAME__REG_SPILL] = "_POP_FRAME__REG_SPILL",
    [_POP_TOP] = "_POP_TOP",
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = "_POP_TOP_LOAD_CONST_INLINE_BORROW",
    [_POP_TOP_LOAD_CONST_INLINE_BORROW__REG] = "_POP_TOP_LOAD_CONST_INLINE_BORROW__REG",
    [_POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL] = "_POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL",
    [_POP_TOP__REG] = "_POP_TOP__REG",
    [_POP_TOP__REG_SPILL] = "_POP_TOP__REG_SPILL",
    [_PUSH_EXC_INFO] = "_PUSH_EXC_INFO",
    [_PUSH_EXC_INFO__REG] = "_PUSH_EXC_INFO__REG",
    [_PUSH_EXC_INFO__REG_SPILL] = "_PUSH_EXC_INFO__REG_SPILL",
    [_PUSH_FRAME] = "_PUSH_FRAME",
    [_PUSH_FRAME__REG] = "_PUSH_FRAME__REG",
    [_PUSH_FRAME__REG_SPILL] = "_PUSH_FRAME__REG_SPILL",
    [_PUSH_NULL] = "_PUSH_NULL",
    [_PUSH_NULL__REG] = "_PUSH_NULL__REG",
    [_PUSH_NULL__REG_SPILL] = "_PUSH_NULL__REG_SPILL",
    [_REG_SPILL_0] = "_REG_SPILL_0",
    [_REG_SPILL_0_1] = "_REG_SPILL_0_1",
    [_REG_SPILL_0_1_2] = "_REG_SPILL_0_1_2",
    [_REG_SPILL_0_1_2__REG] = "_REG_SPILL_0_1_2__REG",
    [_REG_SPILL_0_1_2__REG_SPILL] = "_REG_SPILL_0_1_2__REG_SPILL",
    [_REG_SPILL_0_1__REG] = "_REG_SPILL_0_1__REG",
    [_REG_SPILL_0_1__REG_SPILL] = "_REG_SPILL_0_1__REG_SPILL",
    [_REG_SPILL_0__REG] = "_REG_SPILL_0__REG",
    [_REG_SPILL_0__REG_SPILL] = "_REG_SPILL_0__REG_SPILL",
    [_REPLACE_WITH_TRUE] = "_REPLACE_WITH_TRUE",
    [_REPLACE_WITH_TRUE__REG] = "_REPLACE_WITH_TRUE__REG",
    [_REPLACE_WITH_TRUE__REG_SPILL] = "_REPLACE_WITH_TRUE__REG_SPILL",
    [_RESUME_CHECK] = "_RESUME_CHECK",
    [_SAVE_RETURN_OFFSET] = "_SAVE_RETURN_OFFSET",
    [_SETUP_ANNOTATIONS] = "_SETUP_ANNOTATIONS",
    [_SET_ADD] = "_SET_ADD",
    [_SET_ADD__REG] = "_SET_ADD__REG",
    [_SET_ADD__REG_SPILL] = "_SET_ADD__REG_SPILL",
    [_SET_FUNCTION_ATTRIBUTE] = "_SET_FUNCTION_ATTRIBUTE",
    [_SET_FUNCTION_ATTRIBUTE__REG] = "_SET_FUNCTION_ATTRIBUTE__REG",
    [_SET_FUNCTION_ATTRIBUTE__REG_SPILL] = "_SET_FUNCTION_ATTRIBUTE__REG_SPILL",
    [_SET_IP] = "_SET_IP",
    [_SET_UPDATE] = "_SET_UPDATE",
    [_SET_UPDATE__REG] = "_SET_UPDATE__REG",
    [_SET_UPDATE__REG_SPILL] = "_SET_UPDATE__REG_SPILL",
    [_START_EXECUTOR] = "_START_EXECUTOR",
    [_STORE_ATTR] = "_STORE_ATTR",
    [_STORE_ATTR_INSTANCE_VALUE] = "_STORE_ATTR_INSTANCE_VALUE",
    [_STORE_ATTR_INSTANCE_VALUE__REG] = "_STORE_ATTR_INSTANCE_VALUE__REG",
    [_STORE_ATTR_INSTANCE_VALUE__REG_SPILL] = "_STORE_ATTR_INSTANCE_VALUE__REG_SPILL",
    [_STORE_ATTR_SLOT] = "_STORE_ATTR_SLOT",
    [_STORE_ATTR_SLOT__REG] = "_STORE_ATTR_SLOT__REG",
    [_STORE_ATTR_SLOT__REG_SPILL] = "_STORE_ATTR_SLOT__REG_SPILL",
    [_STORE_ATTR__REG] = "_STORE_ATTR__REG",
    [_STORE_ATTR__REG_SPILL] = "_STORE_ATTR__REG_SPILL",
    [_STORE_DEREF] = "_STORE_DEREF",
    [_STORE_DEREF__REG] = "_STORE_DEREF__REG",
    [_STORE_DEREF__REG_SPILL] = "_STORE_DEREF__REG_SPILL",
    [_STORE_FAST] = "_STORE_FAST",
    [_STORE_FAST_0] = "_STORE_FAST_0",
    [_STORE_FAST_0__REG] = "_STORE_FAST_0__REG",
    [_STORE_FAST_0__REG_SPILL] = "_STORE_FAST_0__REG_SPILL",
    [_STORE_FAST_1] = "_STORE_FAST_1",
    [_STORE_FAST_1__REG] = "_STORE_FAST_1__REG",
    [_STORE_FAST_1__REG_SPILL] = "_STORE_FAST_1__REG_SPILL",
    [_STORE_FAST_2] = "_STORE_FAST_2",
    [_STORE_FAST_2__REG] = "_STORE_FAST_2__REG",
    [_STORE_FAST_2__REG_SPILL] = "_STORE_FAST_2__REG_SPILL",
    [_STORE_FAST_3] = "_STORE_FAST_3",
    [_STORE_FAST_3__REG] = "_STORE_FAST_3__REG",
    [_STORE_FAST_3__REG_SPILL] = "_STORE_FAST_3__REG_SPILL",
    [_STORE_FAST_4] = "_STORE_FAST_4",
    [_STORE_FAST_4__REG] = "_STORE_FAST_4__REG",
    [_STORE_FAST_4__REG_SPILL] = "_STORE_FAST_4__REG_SPILL",
    [_STORE_FAST_5] = "_STORE_FAST_5",
    [_STORE_FAST_5__REG] = "_STORE_FAST_5__REG",
    [_STORE_FAST_5__REG_SPILL] = "_STORE_FAST_5__REG_SPILL",
    [_STORE_FAST_6] = "_STORE_FAST_6",
    [_STORE_FAST_6__REG] = "_STORE_FAST_6__REG",
    [_STORE_FAST_6__REG_SPILL] = "_STORE_FAST_6__REG_SPILL",
    [_STORE_FAST_7] = "_STORE_FAST_7",
    [_STORE_FAST_7__REG] = "_STORE_FAST_7__REG",
    [_STORE_FAST_7__REG_SPILL] = "_STORE_FAST_7__REG_SPILL",
    [_STORE_FAST_LOAD_FAST] = "_STORE_FAST_LOAD_FAST",
    [_STORE_FAST_LOAD_FAST__REG] = "_STORE_FAST_LOAD_FAST__REG",
    [_STORE_FAST_LOAD_FAST__REG_SPILL] = "_STORE_FAST_LOAD_FAST__REG_SPILL",
    [_STORE_FAST_STORE_FAST] = "_STORE_FAST_STORE_FAST",
    [_STORE_FAST_STORE_FAST__REG] = "_STORE_FAST_STORE_FAST__REG",
    [_STORE_FAST_STORE_FAST__REG_SPILL] = "_STORE_FAST_STORE_FAST__REG_SPILL",
    [_STORE_FAST__REG] = "_STORE_FAST__REG",
    [_STORE_FAST__REG_SPILL] = "_STORE_FAST__REG_SPILL",
    [_STORE_GLOBAL] = "_STORE_GLOBAL",
    [_STORE_GLOBAL__REG] = "_STORE_GLOBAL__REG",
    [_STORE_GLOBAL__REG_SPILL] = "_STORE_GLOBAL__REG_SPILL",
    [_STORE_NAME] = "_STORE_NAME",
    [_STORE_NAME__REG] = "_STORE_NAME__REG",
    [_STORE_NAME__REG_SPILL] = "_STORE_NAME__REG_SPILL",
    [_STORE_SLICE] = "_STORE_SLICE",
    [_STORE_SLICE__REG] = "_STORE_SLICE__REG",
    [_STORE_SLICE__REG_SPILL] = "_STORE_SLICE__REG_SPILL",
    [_STORE_SUBSCR] = "_STORE_SUBSCR",
    [_STORE_SUBSCR_DICT] = "_STORE_SUBSCR_DICT",
    [_STORE_SUBSCR_DICT__REG] = "_STORE_SUBSCR_DICT__REG",
    [_STORE_SUBSCR_DICT__REG_SPILL] = "_STORE_SUBSCR_DICT__REG_SPILL",
    [_STORE_SUBSCR_LIST_INT] = "_STORE_SUBSCR_LIST_INT",
    [_STORE_SUBSCR_LIST_INT__REG] = "_STORE_SUBSCR_LIST_INT__REG",
    [_STORE_SUBSCR_LIST_INT__REG_SPILL] = "_STORE_SUBSCR_LIST_INT__REG_SPILL",
    [_STORE_SUBSCR__REG] = "_STORE_SUBSCR__REG",
    [_STORE_SUBSCR__REG_SPILL] = "_STORE_SUBSCR__REG_SPILL",
    [_SWAP] = "_SWAP",
    [_SWAP__REG] = "_SWAP__REG",
    [_SWAP__REG_SPILL] = "_SWAP__REG_SPILL",
    [_TO_BOOL] = "_TO_BOOL",
    [_TO_BOOL_BOOL] = "_TO_BOOL_BOOL",
    [_TO_BOOL_BOOL__REG] = "_TO_BOOL_BOOL__REG",
    [_TO_BOOL_BOOL__REG_SPILL] = "_TO_BOOL_BOOL__REG_SPILL",
    [_TO_BOOL_INT] = "_TO_BOOL_INT",
    [_TO_BOOL_INT__REG] = "_TO_BOOL_INT__REG",
    [_TO_BOOL_INT__REG_SPILL] = "_TO_BOOL_INT__REG_SPILL",
    [_TO_BOOL_LIST] = "_TO_BOOL_LIST",
    [_TO_BOOL_LIST__REG] = "_TO_BOOL_LIST__REG",
    [_TO_BOOL_LIST__REG_SPILL] = "_TO_BOOL_LIST__REG_SPILL",
    [_TO_BOOL_NONE] = "_TO_BOOL_NONE",
    [_TO_BOOL_NONE__REG] = "_TO_BOOL_NONE__REG",
    [_TO_BOOL_NONE__REG_SPILL] = "_TO_BOOL_NONE__REG_SPILL",
    [_TO_BOOL_STR] = "_TO_BOOL_STR",
    [_TO_BOOL_STR__REG] = "_TO_BOOL_STR__REG",
    [_TO_BOOL_STR__REG_SPILL] = "_TO_BOOL_STR__REG_SPILL",
    [_TO_BOOL__REG] = "_TO_BOOL__REG",
    [_TO_BOOL__REG_SPILL] = "_TO_BOOL__REG_SPILL",
    [_UNARY_INVERT] = "_UNARY_INVERT",
    [_UNARY_INVERT__REG] = "_UNARY_INVERT__REG",
    [_UNARY_INVERT__REG_SPILL] = "_UNARY_INVERT__REG_SPILL",
    [_UNARY_NEGATIVE] = "_UNARY_NEGATIVE",
    [_UNARY_NEGATIVE__REG] = "_UNARY_NEGATIVE__REG",
    [_UNARY_NEGATIVE__REG_SPILL] = "_UNARY_NEGATIVE__REG_SPILL",
    [_UNARY_NOT] = "_UNARY_NOT",
    [_UNARY_NOT__REG] = "_UNARY_NOT__REG",
    [_UNARY_NOT__REG_SPILL] = "_UNARY_NOT__REG_SPILL",
    [_UNPACK_EX] = "_UNPACK_EX",
    [_UNPACK_EX__REG] = "_UNPACK_EX__REG",
    [_UNPACK_EX__REG_SPILL] = "_UNPACK_EX__REG_SPILL",
    [_UNPACK_SEQUENCE] = "_UNPACK_SEQUENCE",
    [_UNPACK_SEQUENCE_LIST] = "_UNPACK_SEQUENCE_LIST",
    [_UNPACK_SEQUENCE_LIST__REG] = "_UNPACK_SEQUENCE_LIST__REG",
    [_UNPACK_SEQUENCE_LIST__REG_SPILL] = "_UNPACK_SEQUENCE_LIST__REG_SPILL",
    [_UNPACK_SEQUENCE_TUPLE] = "_UNPACK_SEQUENCE_TUPLE",
    [_UNPACK_SEQUENCE_TUPLE__REG] = "_UNPACK_SEQUENCE_TUPLE__REG",
    [_UNPACK_SEQUENCE_TUPLE__REG_SPILL] = "_UNPACK_SEQUENCE_TUPLE__REG_SPILL",
    [_UNPACK_SEQUENCE_TWO_TUPLE] = "_UNPACK_SEQUENCE_TWO_TUPLE",
    [_UNPACK_SEQUENCE_TWO_TUPLE__REG] = "_UNPACK_SEQUENCE_TWO_TUPLE__REG",
    [_UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL] = "_UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL",
    [_UNPACK_SEQUENCE__REG] = "_UNPACK_SEQUENCE__REG",
    [_UNPACK_SEQUENCE__REG_SPILL] = "_UNPACK_SEQUENCE__REG_SPILL",
    [_WITH_EXCEPT_START] = "_WITH_EXCEPT_START",
    [_WITH_EXCEPT_START__REG] = "_WITH_EXCEPT_START__REG",
    [_WITH_EXCEPT_START__REG_SPILL] = "_WITH_EXCEPT_START__REG_SPILL",
};
#endif // NEED_OPCODE_METADATA

extern int _PyUop_num_popped(int opcode, int oparg);
#ifdef NEED_OPCODE_METADATA
int _PyUop_num_popped(int opcode, int oparg)  {
    switch(opcode) {
        case _BEFORE_ASYNC_WITH:
            return 1;
        case _BEFORE_ASYNC_WITH__REG:
            return 1;
        case _BEFORE_ASYNC_WITH__REG_SPILL:
            return 1;
        case _BEFORE_WITH:
            return 1;
        case _BEFORE_WITH__REG:
            return 1;
        case _BEFORE_WITH__REG_SPILL:
            return 1;
        case _BINARY_OP:
            return 2;
        case _BINARY_OP_ADD_FLOAT:
            return 2;
        case _BINARY_OP_ADD_FLOAT__REG:
            return 2;
        case _BINARY_OP_ADD_FLOAT__REG_SPILL:
            return 2;
        case _BINARY_OP_ADD_INT:
            return 2;
        case _BINARY_OP_ADD_INT__REG:
            return 2;
        case _BINARY_OP_ADD_INT__REG_SPILL:
            return 2;
        case _BINARY_OP_ADD_UNICODE:
            return 2;
        case _BINARY_OP_ADD_UNICODE__REG:
            return 2;
        case _BINARY_OP_ADD_UNICODE__REG_SPILL:
            return 2;
        case _BINARY_OP_MULTIPLY_FLOAT:
            return 2;
        case _BINARY_OP_MULTIPLY_FLOAT__REG:
            return 2;
        case _BINARY_OP_MULTIPLY_FLOAT__REG_SPILL:
            return 2;
        case _BINARY_OP_MULTIPLY_INT:
            return 2;
        case _BINARY_OP_MULTIPLY_INT__REG:
            return 2;
        case _BINARY_OP_MULTIPLY_INT__REG_SPILL:
            return 2;
        case _BINARY_OP_SUBTRACT_FLOAT:
            return 2;
        case _BINARY_OP_SUBTRACT_FLOAT__REG:
            return 2;
        case _BINARY_OP_SUBTRACT_FLOAT__REG_SPILL:
            return 2;
        case _BINARY_OP_SUBTRACT_INT:
            return 2;
        case _BINARY_OP_SUBTRACT_INT__REG:
            return 2;
        case _BINARY_OP_SUBTRACT_INT__REG_SPILL:
            return 2;
        case _BINARY_OP__REG:
            return 2;
        case _BINARY_OP__REG_SPILL:
            return 2;
        case _BINARY_SLICE:
            return 3;
        case _BINARY_SLICE__REG:
            return 3;
        case _BINARY_SLICE__REG_SPILL:
            return 3;
        case _BINARY_SUBSCR:
            return 2;
        case _BINARY_SUBSCR_DICT:
            return 2;
        case _BINARY_SUBSCR_DICT__REG:
            return 2;
        case _BINARY_SUBSCR_DICT__REG_SPILL:
            return 2;
        case _BINARY_SUBSCR_LIST_INT:
            return 2;
        case _BINARY_SUBSCR_LIST_INT__REG:
            return 2;
        case _BINARY_SUBSCR_LIST_INT__REG_SPILL:
            return 2;
        case _BINARY_SUBSCR_STR_INT:
            return 2;
        case _BINARY_SUBSCR_STR_INT__REG:
            return 2;
        case _BINARY_SUBSCR_STR_INT__REG_SPILL:
            return 2;
        case _BINARY_SUBSCR_TUPLE_INT:
            return 2;
        case _BINARY_SUBSCR_TUPLE_INT__REG:
            return 2;
        case _BINARY_SUBSCR_TUPLE_INT__REG_SPILL:
            return 2;
        case _BINARY_SUBSCR__REG:
            return 2;
        case _BINARY_SUBSCR__REG_SPILL:
            return 2;
        case _BUILD_CONST_KEY_MAP:
            return 1 + oparg;
        case _BUILD_CONST_KEY_MAP__REG:
            return 1 + oparg;
        case _BUILD_CONST_KEY_MAP__REG_SPILL:
            return 1 + oparg;
        case _BUILD_LIST:
            return oparg;
        case _BUILD_LIST__REG:
            return oparg;
        case _BUILD_LIST__REG_SPILL:
            return oparg;
        case _BUILD_MAP:
            return oparg*2;
        case _BUILD_MAP__REG:
            return oparg*2;
        case _BUILD_MAP__REG_SPILL:
            return oparg*2;
        case _BUILD_SET:
            return oparg;
        case _BUILD_SET__REG:
            return oparg;
        case _BUILD_SET__REG_SPILL:
            return oparg;
        case _BUILD_SLICE:
            return 2 + ((oparg == 3) ? 1 : 0);
        case _BUILD_SLICE__REG:
            return 2 + ((oparg == 3) ? 1 : 0);
        case _BUILD_SLICE__REG_SPILL:
            return 2 + ((oparg == 3) ? 1 : 0);
        case _BUILD_STRING:
            return oparg;
        case _BUILD_STRING__REG:
            return oparg;
        case _BUILD_STRING__REG_SPILL:
            return oparg;
        case _BUILD_TUPLE:
            return oparg;
        case _BUILD_TUPLE__REG:
            return oparg;
        case _BUILD_TUPLE__REG_SPILL:
            return oparg;
        case _CALL_BUILTIN_CLASS:
            return 2 + oparg;
        case _CALL_BUILTIN_CLASS__REG:
            return 2 + oparg;
        case _CALL_BUILTIN_CLASS__REG_SPILL:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST__REG:
            return 2 + oparg;
        case _CALL_BUILTIN_FAST__REG_SPILL:
            return 2 + oparg;
        case _CALL_BUILTIN_O:
            return 2 + oparg;
        case _CALL_BUILTIN_O__REG:
            return 2 + oparg;
        case _CALL_BUILTIN_O__REG_SPILL:
            return 2 + oparg;
        case _CALL_INTRINSIC_1:
            return 1;
        case _CALL_INTRINSIC_1__REG:
            return 1;
        case _CALL_INTRINSIC_1__REG_SPILL:
            return 1;
        case _CALL_INTRINSIC_2:
            return 2;
        case _CALL_INTRINSIC_2__REG:
            return 2;
        case _CALL_INTRINSIC_2__REG_SPILL:
            return 2;
        case _CALL_ISINSTANCE:
            return 2 + oparg;
        case _CALL_ISINSTANCE__REG:
            return 2 + oparg;
        case _CALL_ISINSTANCE__REG_SPILL:
            return 2 + oparg;
        case _CALL_LEN:
            return 2 + oparg;
        case _CALL_LEN__REG:
            return 2 + oparg;
        case _CALL_LEN__REG_SPILL:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST__REG:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_NOARGS:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_NOARGS__REG:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_O:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_O__REG:
            return 2 + oparg;
        case _CALL_METHOD_DESCRIPTOR_O__REG_SPILL:
            return 2 + oparg;
        case _CALL_STR_1:
            return 2 + oparg;
        case _CALL_STR_1__REG:
            return 2 + oparg;
        case _CALL_STR_1__REG_SPILL:
            return 2 + oparg;
        case _CALL_TUPLE_1:
            return 2 + oparg;
        case _CALL_TUPLE_1__REG:
            return 2 + oparg;
        case _CALL_TUPLE_1__REG_SPILL:
            return 2 + oparg;
        case _CALL_TYPE_1:
            return 2 + oparg;
        case _CALL_TYPE_1__REG:
            return 2 + oparg;
        case _CALL_TYPE_1__REG_SPILL:
            return 2 + oparg;
        case _CHECK_ATTR_CLASS:
            return 1;
        case _CHECK_ATTR_CLASS__REG:
            return 1;
        case _CHECK_ATTR_CLASS__REG_SPILL:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT__REG:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL:
            return 1;
        case _CHECK_ATTR_MODULE:
            return 1;
        case _CHECK_ATTR_MODULE__REG:
            return 1;
        case _CHECK_ATTR_MODULE__REG_SPILL:
            return 1;
        case _CHECK_ATTR_WITH_HINT:
            return 1;
        case _CHECK_ATTR_WITH_HINT__REG:
            return 1;
        case _CHECK_ATTR_WITH_HINT__REG_SPILL:
            return 1;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS:
            return 2 + oparg;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG:
            return 2 + oparg;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _CHECK_EG_MATCH:
            return 2;
        case _CHECK_EG_MATCH__REG:
            return 2;
        case _CHECK_EG_MATCH__REG_SPILL:
            return 2;
        case _CHECK_EXC_MATCH:
            return 2;
        case _CHECK_EXC_MATCH__REG:
            return 2;
        case _CHECK_EXC_MATCH__REG_SPILL:
            return 2;
        case _CHECK_FUNCTION:
            return 0;
        case _CHECK_FUNCTION_EXACT_ARGS:
            return 2 + oparg;
        case _CHECK_FUNCTION_EXACT_ARGS__REG:
            return 2 + oparg;
        case _CHECK_FUNCTION_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES:
            return 1;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES__REG:
            return 1;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL:
            return 1;
        case _CHECK_PEP_523:
            return 0;
        case _CHECK_STACK_SPACE:
            return 2 + oparg;
        case _CHECK_STACK_SPACE__REG:
            return 2 + oparg;
        case _CHECK_STACK_SPACE__REG_SPILL:
            return 2 + oparg;
        case _CHECK_VALIDITY:
            return 0;
        case _CHECK_VALIDITY_AND_SET_IP:
            return 0;
        case _COLD_EXIT:
            return 0;
        case _COMPARE_OP:
            return 2;
        case _COMPARE_OP_FLOAT:
            return 2;
        case _COMPARE_OP_FLOAT__REG:
            return 2;
        case _COMPARE_OP_FLOAT__REG_SPILL:
            return 2;
        case _COMPARE_OP_INT:
            return 2;
        case _COMPARE_OP_INT__REG:
            return 2;
        case _COMPARE_OP_INT__REG_SPILL:
            return 2;
        case _COMPARE_OP_STR:
            return 2;
        case _COMPARE_OP_STR__REG:
            return 2;
        case _COMPARE_OP_STR__REG_SPILL:
            return 2;
        case _COMPARE_OP__REG:
            return 2;
        case _COMPARE_OP__REG_SPILL:
            return 2;
        case _CONTAINS_OP:
            return 2;
        case _CONTAINS_OP_DICT:
            return 2;
        case _CONTAINS_OP_DICT__REG:
            return 2;
        case _CONTAINS_OP_DICT__REG_SPILL:
            return 2;
        case _CONTAINS_OP_SET:
            return 2;
        case _CONTAINS_OP_SET__REG:
            return 2;
        case _CONTAINS_OP_SET__REG_SPILL:
            return 2;
        case _CONTAINS_OP__REG:
            return 2;
        case _CONTAINS_OP__REG_SPILL:
            return 2;
        case _CONVERT_VALUE:
            return 1;
        case _CONVERT_VALUE__REG:
            return 1;
        case _CONVERT_VALUE__REG_SPILL:
            return 1;
        case _COPY:
            return 1 + (oparg-1);
        case _COPY_FREE_VARS:
            return 0;
        case _COPY__REG:
            return 1 + (oparg-1);
        case _COPY__REG_SPILL:
            return 1 + (oparg-1);
        case _DELETE_ATTR:
            return 1;
        case _DELETE_ATTR__REG:
            return 1;
        case _DELETE_ATTR__REG_SPILL:
            return 1;
        case _DELETE_DEREF:
            return 0;
        case _DELETE_FAST:
            return 0;
        case _DELETE_GLOBAL:
            return 0;
        case _DELETE_NAME:
            return 0;
        case _DELETE_SUBSCR:
            return 2;
        case _DELETE_SUBSCR__REG:
            return 2;
        case _DELETE_SUBSCR__REG_SPILL:
            return 2;
        case _DICT_MERGE:
            return 5 + (oparg - 1);
        case _DICT_MERGE__REG:
            return 5 + (oparg - 1);
        case _DICT_MERGE__REG_SPILL:
            return 5 + (oparg - 1);
        case _DICT_UPDATE:
            return 2 + (oparg - 1);
        case _DICT_UPDATE__REG:
            return 2 + (oparg - 1);
        case _DICT_UPDATE__REG_SPILL:
            return 2 + (oparg - 1);
        case _END_SEND:
            return 2;
        case _END_SEND__REG:
            return 2;
        case _END_SEND__REG_SPILL:
            return 2;
        case _EXIT_INIT_CHECK:
            return 1;
        case _EXIT_INIT_CHECK__REG:
            return 1;
        case _EXIT_INIT_CHECK__REG_SPILL:
            return 1;
        case _EXIT_TRACE:
            return 0;
        case _FATAL_ERROR:
            return 0;
        case _FORMAT_SIMPLE:
            return 1;
        case _FORMAT_SIMPLE__REG:
            return 1;
        case _FORMAT_SIMPLE__REG_SPILL:
            return 1;
        case _FORMAT_WITH_SPEC:
            return 2;
        case _FORMAT_WITH_SPEC__REG:
            return 2;
        case _FORMAT_WITH_SPEC__REG_SPILL:
            return 2;
        case _FOR_ITER_TIER_TWO:
            return 1;
        case _FOR_ITER_TIER_TWO__REG:
            return 1;
        case _FOR_ITER_TIER_TWO__REG_SPILL:
            return 1;
        case _GET_AITER:
            return 1;
        case _GET_AITER__REG:
            return 1;
        case _GET_AITER__REG_SPILL:
            return 1;
        case _GET_ANEXT:
            return 1;
        case _GET_ANEXT__REG:
            return 1;
        case _GET_ANEXT__REG_SPILL:
            return 1;
        case _GET_AWAITABLE:
            return 1;
        case _GET_AWAITABLE__REG:
            return 1;
        case _GET_AWAITABLE__REG_SPILL:
            return 1;
        case _GET_ITER:
            return 1;
        case _GET_ITER__REG:
            return 1;
        case _GET_ITER__REG_SPILL:
            return 1;
        case _GET_LEN:
            return 1;
        case _GET_LEN__REG:
            return 1;
        case _GET_LEN__REG_SPILL:
            return 1;
        case _GET_YIELD_FROM_ITER:
            return 1;
        case _GET_YIELD_FROM_ITER__REG:
            return 1;
        case _GET_YIELD_FROM_ITER__REG_SPILL:
            return 1;
        case _GUARD_BOTH_FLOAT:
            return 2;
        case _GUARD_BOTH_FLOAT__REG:
            return 2;
        case _GUARD_BOTH_FLOAT__REG_SPILL:
            return 2;
        case _GUARD_BOTH_INT:
            return 2;
        case _GUARD_BOTH_INT__REG:
            return 2;
        case _GUARD_BOTH_INT__REG_SPILL:
            return 2;
        case _GUARD_BOTH_UNICODE:
            return 2;
        case _GUARD_BOTH_UNICODE__REG:
            return 2;
        case _GUARD_BOTH_UNICODE__REG_SPILL:
            return 2;
        case _GUARD_BUILTINS_VERSION:
            return 0;
        case _GUARD_DORV_VALUES:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL:
            return 1;
        case _GUARD_DORV_VALUES__REG:
            return 1;
        case _GUARD_DORV_VALUES__REG_SPILL:
            return 1;
        case _GUARD_GLOBALS_VERSION:
            return 0;
        case _GUARD_IS_FALSE_POP:
            return 1;
        case _GUARD_IS_FALSE_POP__REG:
            return 1;
        case _GUARD_IS_FALSE_POP__REG_SPILL:
            return 1;
        case _GUARD_IS_NONE_POP:
            return 1;
        case _GUARD_IS_NONE_POP__REG:
            return 1;
        case _GUARD_IS_NONE_POP__REG_SPILL:
            return 1;
        case _GUARD_IS_NOT_NONE_POP:
            return 1;
        case _GUARD_IS_NOT_NONE_POP__REG:
            return 1;
        case _GUARD_IS_NOT_NONE_POP__REG_SPILL:
            return 1;
        case _GUARD_IS_TRUE_POP:
            return 1;
        case _GUARD_IS_TRUE_POP__REG:
            return 1;
        case _GUARD_IS_TRUE_POP__REG_SPILL:
            return 1;
        case _GUARD_KEYS_VERSION:
            return 1;
        case _GUARD_KEYS_VERSION__REG:
            return 1;
        case _GUARD_KEYS_VERSION__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL:
            return 1;
        case _GUARD_TYPE_VERSION:
            return 1;
        case _GUARD_TYPE_VERSION__REG:
            return 1;
        case _GUARD_TYPE_VERSION__REG_SPILL:
            return 1;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS:
            return 2 + oparg;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG:
            return 2 + oparg;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_0:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_0__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_1:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_1__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_2:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_2__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_3:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_3__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_4:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_4__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS__REG:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _INTERNAL_INCREMENT_OPT_COUNTER:
            return 1;
        case _INTERNAL_INCREMENT_OPT_COUNTER__REG:
            return 1;
        case _INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL:
            return 1;
        case _IS_NONE:
            return 1;
        case _IS_NONE__REG:
            return 1;
        case _IS_NONE__REG_SPILL:
            return 1;
        case _IS_OP:
            return 2;
        case _IS_OP__REG:
            return 2;
        case _IS_OP__REG_SPILL:
            return 2;
        case _ITER_CHECK_LIST:
            return 1;
        case _ITER_CHECK_LIST__REG:
            return 1;
        case _ITER_CHECK_LIST__REG_SPILL:
            return 1;
        case _ITER_CHECK_RANGE:
            return 1;
        case _ITER_CHECK_RANGE__REG:
            return 1;
        case _ITER_CHECK_RANGE__REG_SPILL:
            return 1;
        case _ITER_CHECK_TUPLE:
            return 1;
        case _ITER_CHECK_TUPLE__REG:
            return 1;
        case _ITER_CHECK_TUPLE__REG_SPILL:
            return 1;
        case _ITER_NEXT_LIST:
            return 1;
        case _ITER_NEXT_LIST__REG:
            return 1;
        case _ITER_NEXT_LIST__REG_SPILL:
            return 1;
        case _ITER_NEXT_RANGE:
            return 1;
        case _ITER_NEXT_RANGE__REG:
            return 1;
        case _ITER_NEXT_RANGE__REG_SPILL:
            return 1;
        case _ITER_NEXT_TUPLE:
            return 1;
        case _ITER_NEXT_TUPLE__REG:
            return 1;
        case _ITER_NEXT_TUPLE__REG_SPILL:
            return 1;
        case _JUMP_TO_TOP:
            return 0;
        case _LIST_APPEND:
            return 2 + (oparg-1);
        case _LIST_APPEND__REG:
            return 2 + (oparg-1);
        case _LIST_APPEND__REG_SPILL:
            return 2 + (oparg-1);
        case _LIST_EXTEND:
            return 2 + (oparg-1);
        case _LIST_EXTEND__REG:
            return 2 + (oparg-1);
        case _LIST_EXTEND__REG_SPILL:
            return 2 + (oparg-1);
        case _LOAD_ASSERTION_ERROR:
            return 0;
        case _LOAD_ASSERTION_ERROR__REG:
            return 0;
        case _LOAD_ASSERTION_ERROR__REG_SPILL:
            return 0;
        case _LOAD_ATTR:
            return 1;
        case _LOAD_ATTR_CLASS:
            return 1;
        case _LOAD_ATTR_CLASS_0:
            return 1;
        case _LOAD_ATTR_CLASS_0__REG:
            return 1;
        case _LOAD_ATTR_CLASS_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_CLASS_1:
            return 1;
        case _LOAD_ATTR_CLASS_1__REG:
            return 1;
        case _LOAD_ATTR_CLASS_1__REG_SPILL:
            return 1;
        case _LOAD_ATTR_CLASS__REG:
            return 1;
        case _LOAD_ATTR_CLASS__REG_SPILL:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_0:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_0__REG:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_1:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_1__REG:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE__REG:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE__REG_SPILL:
            return 1;
        case _LOAD_ATTR_METHOD_LAZY_DICT:
            return 1;
        case _LOAD_ATTR_METHOD_LAZY_DICT__REG:
            return 1;
        case _LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL:
            return 1;
        case _LOAD_ATTR_METHOD_NO_DICT:
            return 1;
        case _LOAD_ATTR_METHOD_NO_DICT__REG:
            return 1;
        case _LOAD_ATTR_METHOD_NO_DICT__REG_SPILL:
            return 1;
        case _LOAD_ATTR_METHOD_WITH_VALUES:
            return 1;
        case _LOAD_ATTR_METHOD_WITH_VALUES__REG:
            return 1;
        case _LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL:
            return 1;
        case _LOAD_ATTR_MODULE:
            return 1;
        case _LOAD_ATTR_MODULE__REG:
            return 1;
        case _LOAD_ATTR_MODULE__REG_SPILL:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL:
            return 1;
        case _LOAD_ATTR_SLOT:
            return 1;
        case _LOAD_ATTR_SLOT_0:
            return 1;
        case _LOAD_ATTR_SLOT_0__REG:
            return 1;
        case _LOAD_ATTR_SLOT_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_SLOT_1:
            return 1;
        case _LOAD_ATTR_SLOT_1__REG:
            return 1;
        case _LOAD_ATTR_SLOT_1__REG_SPILL:
            return 1;
        case _LOAD_ATTR_SLOT__REG:
            return 1;
        case _LOAD_ATTR_SLOT__REG_SPILL:
            return 1;
        case _LOAD_ATTR_WITH_HINT:
            return 1;
        case _LOAD_ATTR_WITH_HINT__REG:
            return 1;
        case _LOAD_ATTR_WITH_HINT__REG_SPILL:
            return 1;
        case _LOAD_ATTR__REG:
            return 1;
        case _LOAD_ATTR__REG_SPILL:
            return 1;
        case _LOAD_BUILD_CLASS:
            return 0;
        case _LOAD_BUILD_CLASS__REG:
            return 0;
        case _LOAD_BUILD_CLASS__REG_SPILL:
            return 0;
        case _LOAD_CONST:
            return 0;
        case _LOAD_CONST_INLINE:
            return 0;
        case _LOAD_CONST_INLINE_BORROW:
            return 0;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL:
            return 0;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG:
            return 0;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL:
            return 0;
        case _LOAD_CONST_INLINE_BORROW__REG:
            return 0;
        case _LOAD_CONST_INLINE_BORROW__REG_SPILL:
            return 0;
        case _LOAD_CONST_INLINE_WITH_NULL:
            return 0;
        case _LOAD_CONST_INLINE_WITH_NULL__REG:
            return 0;
        case _LOAD_CONST_INLINE_WITH_NULL__REG_SPILL:
            return 0;
        case _LOAD_CONST_INLINE__REG:
            return 0;
        case _LOAD_CONST_INLINE__REG_SPILL:
            return 0;
        case _LOAD_CONST__REG:
            return 0;
        case _LOAD_CONST__REG_SPILL:
            return 0;
        case _LOAD_DEREF:
            return 0;
        case _LOAD_DEREF__REG:
            return 0;
        case _LOAD_DEREF__REG_SPILL:
            return 0;
        case _LOAD_FAST:
            return 0;
        case _LOAD_FAST_0:
            return 0;
        case _LOAD_FAST_0__REG:
            return 0;
        case _LOAD_FAST_0__REG_SPILL:
            return 0;
        case _LOAD_FAST_1:
            return 0;
        case _LOAD_FAST_1__REG:
            return 0;
        case _LOAD_FAST_1__REG_SPILL:
            return 0;
        case _LOAD_FAST_2:
            return 0;
        case _LOAD_FAST_2__REG:
            return 0;
        case _LOAD_FAST_2__REG_SPILL:
            return 0;
        case _LOAD_FAST_3:
            return 0;
        case _LOAD_FAST_3__REG:
            return 0;
        case _LOAD_FAST_3__REG_SPILL:
            return 0;
        case _LOAD_FAST_4:
            return 0;
        case _LOAD_FAST_4__REG:
            return 0;
        case _LOAD_FAST_4__REG_SPILL:
            return 0;
        case _LOAD_FAST_5:
            return 0;
        case _LOAD_FAST_5__REG:
            return 0;
        case _LOAD_FAST_5__REG_SPILL:
            return 0;
        case _LOAD_FAST_6:
            return 0;
        case _LOAD_FAST_6__REG:
            return 0;
        case _LOAD_FAST_6__REG_SPILL:
            return 0;
        case _LOAD_FAST_7:
            return 0;
        case _LOAD_FAST_7__REG:
            return 0;
        case _LOAD_FAST_7__REG_SPILL:
            return 0;
        case _LOAD_FAST_AND_CLEAR:
            return 0;
        case _LOAD_FAST_AND_CLEAR__REG:
            return 0;
        case _LOAD_FAST_AND_CLEAR__REG_SPILL:
            return 0;
        case _LOAD_FAST_CHECK:
            return 0;
        case _LOAD_FAST_CHECK__REG:
            return 0;
        case _LOAD_FAST_CHECK__REG_SPILL:
            return 0;
        case _LOAD_FAST_LOAD_FAST:
            return 0;
        case _LOAD_FAST_LOAD_FAST__REG:
            return 0;
        case _LOAD_FAST_LOAD_FAST__REG_SPILL:
            return 0;
        case _LOAD_FAST__REG:
            return 0;
        case _LOAD_FAST__REG_SPILL:
            return 0;
        case _LOAD_FROM_DICT_OR_DEREF:
            return 1;
        case _LOAD_FROM_DICT_OR_DEREF__REG:
            return 1;
        case _LOAD_FROM_DICT_OR_DEREF__REG_SPILL:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS__REG:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL:
            return 1;
        case _LOAD_GLOBAL:
            return 0;
        case _LOAD_GLOBAL_BUILTINS:
            return 0;
        case _LOAD_GLOBAL_BUILTINS__REG:
            return 0;
        case _LOAD_GLOBAL_BUILTINS__REG_SPILL:
            return 0;
        case _LOAD_GLOBAL_MODULE:
            return 0;
        case _LOAD_GLOBAL_MODULE__REG:
            return 0;
        case _LOAD_GLOBAL_MODULE__REG_SPILL:
            return 0;
        case _LOAD_GLOBAL__REG:
            return 0;
        case _LOAD_GLOBAL__REG_SPILL:
            return 0;
        case _LOAD_LOCALS:
            return 0;
        case _LOAD_LOCALS__REG:
            return 0;
        case _LOAD_LOCALS__REG_SPILL:
            return 0;
        case _LOAD_NAME:
            return 0;
        case _LOAD_NAME__REG:
            return 0;
        case _LOAD_NAME__REG_SPILL:
            return 0;
        case _LOAD_SUPER_ATTR_ATTR:
            return 3;
        case _LOAD_SUPER_ATTR_ATTR__REG:
            return 3;
        case _LOAD_SUPER_ATTR_ATTR__REG_SPILL:
            return 3;
        case _LOAD_SUPER_ATTR_METHOD:
            return 3;
        case _LOAD_SUPER_ATTR_METHOD__REG:
            return 3;
        case _LOAD_SUPER_ATTR_METHOD__REG_SPILL:
            return 3;
        case _MAKE_CELL:
            return 0;
        case _MAKE_FUNCTION:
            return 1;
        case _MAKE_FUNCTION__REG:
            return 1;
        case _MAKE_FUNCTION__REG_SPILL:
            return 1;
        case _MAP_ADD:
            return 3 + (oparg - 1);
        case _MAP_ADD__REG:
            return 3 + (oparg - 1);
        case _MAP_ADD__REG_SPILL:
            return 3 + (oparg - 1);
        case _MATCH_CLASS:
            return 3;
        case _MATCH_CLASS__REG:
            return 3;
        case _MATCH_CLASS__REG_SPILL:
            return 3;
        case _MATCH_KEYS:
            return 2;
        case _MATCH_KEYS__REG:
            return 2;
        case _MATCH_KEYS__REG_SPILL:
            return 2;
        case _MATCH_MAPPING:
            return 1;
        case _MATCH_MAPPING__REG:
            return 1;
        case _MATCH_MAPPING__REG_SPILL:
            return 1;
        case _MATCH_SEQUENCE:
            return 1;
        case _MATCH_SEQUENCE__REG:
            return 1;
        case _MATCH_SEQUENCE__REG_SPILL:
            return 1;
        case _NOP:
            return 0;
        case _POP_EXCEPT:
            return 1;
        case _POP_EXCEPT__REG:
            return 1;
        case _POP_EXCEPT__REG_SPILL:
            return 1;
        case _POP_FRAME:
            return 1;
        case _POP_FRAME__REG:
            return 1;
        case _POP_FRAME__REG_SPILL:
            return 1;
        case _POP_TOP:
            return 1;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW:
            return 1;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW__REG:
            return 1;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL:
            return 1;
        case _POP_TOP__REG:
            return 1;
        case _POP_TOP__REG_SPILL:
            return 1;
        case _PUSH_EXC_INFO:
            return 1;
        case _PUSH_EXC_INFO__REG:
            return 1;
        case _PUSH_EXC_INFO__REG_SPILL:
            return 1;
        case _PUSH_FRAME:
            return 1;
        case _PUSH_FRAME__REG:
            return 1;
        case _PUSH_FRAME__REG_SPILL:
            return 1;
        case _PUSH_NULL:
            return 0;
        case _PUSH_NULL__REG:
            return 0;
        case _PUSH_NULL__REG_SPILL:
            return 0;
        case _REG_SPILL_0:
            return 1;
        case _REG_SPILL_0_1:
            return 2;
        case _REG_SPILL_0_1_2:
            return 3;
        case _REG_SPILL_0_1_2__REG:
            return 3;
        case _REG_SPILL_0_1_2__REG_SPILL:
            return 3;
        case _REG_SPILL_0_1__REG:
            return 2;
        case _REG_SPILL_0_1__REG_SPILL:
            return 2;
        case _REG_SPILL_0__REG:
            return 1;
        case _REG_SPILL_0__REG_SPILL:
            return 1;
        case _REPLACE_WITH_TRUE:
            return 1;
        case _REPLACE_WITH_TRUE__REG:
            return 1;
        case _REPLACE_WITH_TRUE__REG_SPILL:
            return 1;
        case _RESUME_CHECK:
            return 0;
        case _SAVE_RETURN_OFFSET:
            return 0;
        case _SETUP_ANNOTATIONS:
            return 0;
        case _SET_ADD:
            return 2 + (oparg-1);
        case _SET_ADD__REG:
            return 2 + (oparg-1);
        case _SET_ADD__REG_SPILL:
            return 2 + (oparg-1);
        case _SET_FUNCTION_ATTRIBUTE:
            return 2;
        case _SET_FUNCTION_ATTRIBUTE__REG:
            return 2;
        case _SET_FUNCTION_ATTRIBUTE__REG_SPILL:
            return 2;
        case _SET_IP:
            return 0;
        case _SET_UPDATE:
            return 2 + (oparg-1);
        case _SET_UPDATE__REG:
            return 2 + (oparg-1);
        case _SET_UPDATE__REG_SPILL:
            return 2 + (oparg-1);
        case _START_EXECUTOR:
            return 0;
        case _STORE_ATTR:
            return 2;
        case _STORE_ATTR_INSTANCE_VALUE:
            return 2;
        case _STORE_ATTR_INSTANCE_VALUE__REG:
            return 2;
        case _STORE_ATTR_INSTANCE_VALUE__REG_SPILL:
            return 2;
        case _STORE_ATTR_SLOT:
            return 2;
        case _STORE_ATTR_SLOT__REG:
            return 2;
        case _STORE_ATTR_SLOT__REG_SPILL:
            return 2;
        case _STORE_ATTR__REG:
            return 2;
        case _STORE_ATTR__REG_SPILL:
            return 2;
        case _STORE_DEREF:
            return 1;
        case _STORE_DEREF__REG:
            return 1;
        case _STORE_DEREF__REG_SPILL:
            return 1;
        case _STORE_FAST:
            return 1;
        case _STORE_FAST_0:
            return 1;
        case _STORE_FAST_0__REG:
            return 1;
        case _STORE_FAST_0__REG_SPILL:
            return 1;
        case _STORE_FAST_1:
            return 1;
        case _STORE_FAST_1__REG:
            return 1;
        case _STORE_FAST_1__REG_SPILL:
            return 1;
        case _STORE_FAST_2:
            return 1;
        case _STORE_FAST_2__REG:
            return 1;
        case _STORE_FAST_2__REG_SPILL:
            return 1;
        case _STORE_FAST_3:
            return 1;
        case _STORE_FAST_3__REG:
            return 1;
        case _STORE_FAST_3__REG_SPILL:
            return 1;
        case _STORE_FAST_4:
            return 1;
        case _STORE_FAST_4__REG:
            return 1;
        case _STORE_FAST_4__REG_SPILL:
            return 1;
        case _STORE_FAST_5:
            return 1;
        case _STORE_FAST_5__REG:
            return 1;
        case _STORE_FAST_5__REG_SPILL:
            return 1;
        case _STORE_FAST_6:
            return 1;
        case _STORE_FAST_6__REG:
            return 1;
        case _STORE_FAST_6__REG_SPILL:
            return 1;
        case _STORE_FAST_7:
            return 1;
        case _STORE_FAST_7__REG:
            return 1;
        case _STORE_FAST_7__REG_SPILL:
            return 1;
        case _STORE_FAST_LOAD_FAST:
            return 1;
        case _STORE_FAST_LOAD_FAST__REG:
            return 1;
        case _STORE_FAST_LOAD_FAST__REG_SPILL:
            return 1;
        case _STORE_FAST_STORE_FAST:
            return 2;
        case _STORE_FAST_STORE_FAST__REG:
            return 2;
        case _STORE_FAST_STORE_FAST__REG_SPILL:
            return 2;
        case _STORE_FAST__REG:
            return 1;
        case _STORE_FAST__REG_SPILL:
            return 1;
        case _STORE_GLOBAL:
            return 1;
        case _STORE_GLOBAL__REG:
            return 1;
        case _STORE_GLOBAL__REG_SPILL:
            return 1;
        case _STORE_NAME:
            return 1;
        case _STORE_NAME__REG:
            return 1;
        case _STORE_NAME__REG_SPILL:
            return 1;
        case _STORE_SLICE:
            return 4;
        case _STORE_SLICE__REG:
            return 4;
        case _STORE_SLICE__REG_SPILL:
            return 4;
        case _STORE_SUBSCR:
            return 3;
        case _STORE_SUBSCR_DICT:
            return 3;
        case _STORE_SUBSCR_DICT__REG:
            return 3;
        case _STORE_SUBSCR_DICT__REG_SPILL:
            return 3;
        case _STORE_SUBSCR_LIST_INT:
            return 3;
        case _STORE_SUBSCR_LIST_INT__REG:
            return 3;
        case _STORE_SUBSCR_LIST_INT__REG_SPILL:
            return 3;
        case _STORE_SUBSCR__REG:
            return 3;
        case _STORE_SUBSCR__REG_SPILL:
            return 3;
        case _SWAP:
            return 2 + (oparg-2);
        case _SWAP__REG:
            return 2 + (oparg-2);
        case _SWAP__REG_SPILL:
            return 2 + (oparg-2);
        case _TO_BOOL:
            return 1;
        case _TO_BOOL_BOOL:
            return 1;
        case _TO_BOOL_BOOL__REG:
            return 1;
        case _TO_BOOL_BOOL__REG_SPILL:
            return 1;
        case _TO_BOOL_INT:
            return 1;
        case _TO_BOOL_INT__REG:
            return 1;
        case _TO_BOOL_INT__REG_SPILL:
            return 1;
        case _TO_BOOL_LIST:
            return 1;
        case _TO_BOOL_LIST__REG:
            return 1;
        case _TO_BOOL_LIST__REG_SPILL:
            return 1;
        case _TO_BOOL_NONE:
            return 1;
        case _TO_BOOL_NONE__REG:
            return 1;
        case _TO_BOOL_NONE__REG_SPILL:
            return 1;
        case _TO_BOOL_STR:
            return 1;
        case _TO_BOOL_STR__REG:
            return 1;
        case _TO_BOOL_STR__REG_SPILL:
            return 1;
        case _TO_BOOL__REG:
            return 1;
        case _TO_BOOL__REG_SPILL:
            return 1;
        case _UNARY_INVERT:
            return 1;
        case _UNARY_INVERT__REG:
            return 1;
        case _UNARY_INVERT__REG_SPILL:
            return 1;
        case _UNARY_NEGATIVE:
            return 1;
        case _UNARY_NEGATIVE__REG:
            return 1;
        case _UNARY_NEGATIVE__REG_SPILL:
            return 1;
        case _UNARY_NOT:
            return 1;
        case _UNARY_NOT__REG:
            return 1;
        case _UNARY_NOT__REG_SPILL:
            return 1;
        case _UNPACK_EX:
            return 1;
        case _UNPACK_EX__REG:
            return 1;
        case _UNPACK_EX__REG_SPILL:
            return 1;
        case _UNPACK_SEQUENCE:
            return 1;
        case _UNPACK_SEQUENCE_LIST:
            return 1;
        case _UNPACK_SEQUENCE_LIST__REG:
            return 1;
        case _UNPACK_SEQUENCE_LIST__REG_SPILL:
            return 1;
        case _UNPACK_SEQUENCE_TUPLE:
            return 1;
        case _UNPACK_SEQUENCE_TUPLE__REG:
            return 1;
        case _UNPACK_SEQUENCE_TUPLE__REG_SPILL:
            return 1;
        case _UNPACK_SEQUENCE_TWO_TUPLE:
            return 1;
        case _UNPACK_SEQUENCE_TWO_TUPLE__REG:
            return 1;
        case _UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL:
            return 1;
        case _UNPACK_SEQUENCE__REG:
            return 1;
        case _UNPACK_SEQUENCE__REG_SPILL:
            return 1;
        case _WITH_EXCEPT_START:
            return 4;
        case _WITH_EXCEPT_START__REG:
            return 4;
        case _WITH_EXCEPT_START__REG_SPILL:
            return 4;
        default:
            return -1;
    }
}

#endif

extern int _PyUop_num_pushed(int opcode, int oparg);
#ifdef NEED_OPCODE_METADATA
int _PyUop_num_pushed(int opcode, int oparg)  {
    switch(opcode) {
        case _BEFORE_ASYNC_WITH:
            return 2;
        case _BEFORE_ASYNC_WITH__REG:
            return 2;
        case _BEFORE_ASYNC_WITH__REG_SPILL:
            return 2;
        case _BEFORE_WITH:
            return 2;
        case _BEFORE_WITH__REG:
            return 2;
        case _BEFORE_WITH__REG_SPILL:
            return 2;
        case _BINARY_OP:
            return 1;
        case _BINARY_OP_ADD_FLOAT:
            return 1;
        case _BINARY_OP_ADD_FLOAT__REG:
            return 1;
        case _BINARY_OP_ADD_FLOAT__REG_SPILL:
            return 1;
        case _BINARY_OP_ADD_INT:
            return 1;
        case _BINARY_OP_ADD_INT__REG:
            return 1;
        case _BINARY_OP_ADD_INT__REG_SPILL:
            return 1;
        case _BINARY_OP_ADD_UNICODE:
            return 1;
        case _BINARY_OP_ADD_UNICODE__REG:
            return 1;
        case _BINARY_OP_ADD_UNICODE__REG_SPILL:
            return 1;
        case _BINARY_OP_MULTIPLY_FLOAT:
            return 1;
        case _BINARY_OP_MULTIPLY_FLOAT__REG:
            return 1;
        case _BINARY_OP_MULTIPLY_FLOAT__REG_SPILL:
            return 1;
        case _BINARY_OP_MULTIPLY_INT:
            return 1;
        case _BINARY_OP_MULTIPLY_INT__REG:
            return 1;
        case _BINARY_OP_MULTIPLY_INT__REG_SPILL:
            return 1;
        case _BINARY_OP_SUBTRACT_FLOAT:
            return 1;
        case _BINARY_OP_SUBTRACT_FLOAT__REG:
            return 1;
        case _BINARY_OP_SUBTRACT_FLOAT__REG_SPILL:
            return 1;
        case _BINARY_OP_SUBTRACT_INT:
            return 1;
        case _BINARY_OP_SUBTRACT_INT__REG:
            return 1;
        case _BINARY_OP_SUBTRACT_INT__REG_SPILL:
            return 1;
        case _BINARY_OP__REG:
            return 1;
        case _BINARY_OP__REG_SPILL:
            return 1;
        case _BINARY_SLICE:
            return 1;
        case _BINARY_SLICE__REG:
            return 1;
        case _BINARY_SLICE__REG_SPILL:
            return 1;
        case _BINARY_SUBSCR:
            return 1;
        case _BINARY_SUBSCR_DICT:
            return 1;
        case _BINARY_SUBSCR_DICT__REG:
            return 1;
        case _BINARY_SUBSCR_DICT__REG_SPILL:
            return 1;
        case _BINARY_SUBSCR_LIST_INT:
            return 1;
        case _BINARY_SUBSCR_LIST_INT__REG:
            return 1;
        case _BINARY_SUBSCR_LIST_INT__REG_SPILL:
            return 1;
        case _BINARY_SUBSCR_STR_INT:
            return 1;
        case _BINARY_SUBSCR_STR_INT__REG:
            return 1;
        case _BINARY_SUBSCR_STR_INT__REG_SPILL:
            return 1;
        case _BINARY_SUBSCR_TUPLE_INT:
            return 1;
        case _BINARY_SUBSCR_TUPLE_INT__REG:
            return 1;
        case _BINARY_SUBSCR_TUPLE_INT__REG_SPILL:
            return 1;
        case _BINARY_SUBSCR__REG:
            return 1;
        case _BINARY_SUBSCR__REG_SPILL:
            return 1;
        case _BUILD_CONST_KEY_MAP:
            return 1;
        case _BUILD_CONST_KEY_MAP__REG:
            return 1;
        case _BUILD_CONST_KEY_MAP__REG_SPILL:
            return 1;
        case _BUILD_LIST:
            return 1;
        case _BUILD_LIST__REG:
            return 1;
        case _BUILD_LIST__REG_SPILL:
            return 1;
        case _BUILD_MAP:
            return 1;
        case _BUILD_MAP__REG:
            return 1;
        case _BUILD_MAP__REG_SPILL:
            return 1;
        case _BUILD_SET:
            return 1;
        case _BUILD_SET__REG:
            return 1;
        case _BUILD_SET__REG_SPILL:
            return 1;
        case _BUILD_SLICE:
            return 1;
        case _BUILD_SLICE__REG:
            return 1;
        case _BUILD_SLICE__REG_SPILL:
            return 1;
        case _BUILD_STRING:
            return 1;
        case _BUILD_STRING__REG:
            return 1;
        case _BUILD_STRING__REG_SPILL:
            return 1;
        case _BUILD_TUPLE:
            return 1;
        case _BUILD_TUPLE__REG:
            return 1;
        case _BUILD_TUPLE__REG_SPILL:
            return 1;
        case _CALL_BUILTIN_CLASS:
            return 1;
        case _CALL_BUILTIN_CLASS__REG:
            return 1;
        case _CALL_BUILTIN_CLASS__REG_SPILL:
            return 1;
        case _CALL_BUILTIN_FAST:
            return 1;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS:
            return 1;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG:
            return 1;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL:
            return 1;
        case _CALL_BUILTIN_FAST__REG:
            return 1;
        case _CALL_BUILTIN_FAST__REG_SPILL:
            return 1;
        case _CALL_BUILTIN_O:
            return 1;
        case _CALL_BUILTIN_O__REG:
            return 1;
        case _CALL_BUILTIN_O__REG_SPILL:
            return 1;
        case _CALL_INTRINSIC_1:
            return 1;
        case _CALL_INTRINSIC_1__REG:
            return 1;
        case _CALL_INTRINSIC_1__REG_SPILL:
            return 1;
        case _CALL_INTRINSIC_2:
            return 1;
        case _CALL_INTRINSIC_2__REG:
            return 1;
        case _CALL_INTRINSIC_2__REG_SPILL:
            return 1;
        case _CALL_ISINSTANCE:
            return 1;
        case _CALL_ISINSTANCE__REG:
            return 1;
        case _CALL_ISINSTANCE__REG_SPILL:
            return 1;
        case _CALL_LEN:
            return 1;
        case _CALL_LEN__REG:
            return 1;
        case _CALL_LEN__REG_SPILL:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST__REG:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_NOARGS:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_NOARGS__REG:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_O:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_O__REG:
            return 1;
        case _CALL_METHOD_DESCRIPTOR_O__REG_SPILL:
            return 1;
        case _CALL_STR_1:
            return 1;
        case _CALL_STR_1__REG:
            return 1;
        case _CALL_STR_1__REG_SPILL:
            return 1;
        case _CALL_TUPLE_1:
            return 1;
        case _CALL_TUPLE_1__REG:
            return 1;
        case _CALL_TUPLE_1__REG_SPILL:
            return 1;
        case _CALL_TYPE_1:
            return 1;
        case _CALL_TYPE_1__REG:
            return 1;
        case _CALL_TYPE_1__REG_SPILL:
            return 1;
        case _CHECK_ATTR_CLASS:
            return 1;
        case _CHECK_ATTR_CLASS__REG:
            return 1;
        case _CHECK_ATTR_CLASS__REG_SPILL:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT__REG:
            return 1;
        case _CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL:
            return 1;
        case _CHECK_ATTR_MODULE:
            return 1;
        case _CHECK_ATTR_MODULE__REG:
            return 1;
        case _CHECK_ATTR_MODULE__REG_SPILL:
            return 1;
        case _CHECK_ATTR_WITH_HINT:
            return 1;
        case _CHECK_ATTR_WITH_HINT__REG:
            return 1;
        case _CHECK_ATTR_WITH_HINT__REG_SPILL:
            return 1;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS:
            return 2 + oparg;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG:
            return 2 + oparg;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _CHECK_EG_MATCH:
            return 2;
        case _CHECK_EG_MATCH__REG:
            return 2;
        case _CHECK_EG_MATCH__REG_SPILL:
            return 2;
        case _CHECK_EXC_MATCH:
            return 2;
        case _CHECK_EXC_MATCH__REG:
            return 2;
        case _CHECK_EXC_MATCH__REG_SPILL:
            return 2;
        case _CHECK_FUNCTION:
            return 0;
        case _CHECK_FUNCTION_EXACT_ARGS:
            return 2 + oparg;
        case _CHECK_FUNCTION_EXACT_ARGS__REG:
            return 2 + oparg;
        case _CHECK_FUNCTION_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES:
            return 1;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES__REG:
            return 1;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL:
            return 1;
        case _CHECK_PEP_523:
            return 0;
        case _CHECK_STACK_SPACE:
            return 2 + oparg;
        case _CHECK_STACK_SPACE__REG:
            return 2 + oparg;
        case _CHECK_STACK_SPACE__REG_SPILL:
            return 2 + oparg;
        case _CHECK_VALIDITY:
            return 0;
        case _CHECK_VALIDITY_AND_SET_IP:
            return 0;
        case _COLD_EXIT:
            return 0;
        case _COMPARE_OP:
            return 1;
        case _COMPARE_OP_FLOAT:
            return 1;
        case _COMPARE_OP_FLOAT__REG:
            return 1;
        case _COMPARE_OP_FLOAT__REG_SPILL:
            return 1;
        case _COMPARE_OP_INT:
            return 1;
        case _COMPARE_OP_INT__REG:
            return 1;
        case _COMPARE_OP_INT__REG_SPILL:
            return 1;
        case _COMPARE_OP_STR:
            return 1;
        case _COMPARE_OP_STR__REG:
            return 1;
        case _COMPARE_OP_STR__REG_SPILL:
            return 1;
        case _COMPARE_OP__REG:
            return 1;
        case _COMPARE_OP__REG_SPILL:
            return 1;
        case _CONTAINS_OP:
            return 1;
        case _CONTAINS_OP_DICT:
            return 1;
        case _CONTAINS_OP_DICT__REG:
            return 1;
        case _CONTAINS_OP_DICT__REG_SPILL:
            return 1;
        case _CONTAINS_OP_SET:
            return 1;
        case _CONTAINS_OP_SET__REG:
            return 1;
        case _CONTAINS_OP_SET__REG_SPILL:
            return 1;
        case _CONTAINS_OP__REG:
            return 1;
        case _CONTAINS_OP__REG_SPILL:
            return 1;
        case _CONVERT_VALUE:
            return 1;
        case _CONVERT_VALUE__REG:
            return 1;
        case _CONVERT_VALUE__REG_SPILL:
            return 1;
        case _COPY:
            return 2 + (oparg-1);
        case _COPY_FREE_VARS:
            return 0;
        case _COPY__REG:
            return 2 + (oparg-1);
        case _COPY__REG_SPILL:
            return 2 + (oparg-1);
        case _DELETE_ATTR:
            return 0;
        case _DELETE_ATTR__REG:
            return 0;
        case _DELETE_ATTR__REG_SPILL:
            return 0;
        case _DELETE_DEREF:
            return 0;
        case _DELETE_FAST:
            return 0;
        case _DELETE_GLOBAL:
            return 0;
        case _DELETE_NAME:
            return 0;
        case _DELETE_SUBSCR:
            return 0;
        case _DELETE_SUBSCR__REG:
            return 0;
        case _DELETE_SUBSCR__REG_SPILL:
            return 0;
        case _DICT_MERGE:
            return 4 + (oparg - 1);
        case _DICT_MERGE__REG:
            return 4 + (oparg - 1);
        case _DICT_MERGE__REG_SPILL:
            return 4 + (oparg - 1);
        case _DICT_UPDATE:
            return 1 + (oparg - 1);
        case _DICT_UPDATE__REG:
            return 1 + (oparg - 1);
        case _DICT_UPDATE__REG_SPILL:
            return 1 + (oparg - 1);
        case _END_SEND:
            return 1;
        case _END_SEND__REG:
            return 1;
        case _END_SEND__REG_SPILL:
            return 1;
        case _EXIT_INIT_CHECK:
            return 0;
        case _EXIT_INIT_CHECK__REG:
            return 0;
        case _EXIT_INIT_CHECK__REG_SPILL:
            return 0;
        case _EXIT_TRACE:
            return 0;
        case _FATAL_ERROR:
            return 0;
        case _FORMAT_SIMPLE:
            return 1;
        case _FORMAT_SIMPLE__REG:
            return 1;
        case _FORMAT_SIMPLE__REG_SPILL:
            return 1;
        case _FORMAT_WITH_SPEC:
            return 1;
        case _FORMAT_WITH_SPEC__REG:
            return 1;
        case _FORMAT_WITH_SPEC__REG_SPILL:
            return 1;
        case _FOR_ITER_TIER_TWO:
            return 2;
        case _FOR_ITER_TIER_TWO__REG:
            return 2;
        case _FOR_ITER_TIER_TWO__REG_SPILL:
            return 2;
        case _GET_AITER:
            return 1;
        case _GET_AITER__REG:
            return 1;
        case _GET_AITER__REG_SPILL:
            return 1;
        case _GET_ANEXT:
            return 2;
        case _GET_ANEXT__REG:
            return 2;
        case _GET_ANEXT__REG_SPILL:
            return 2;
        case _GET_AWAITABLE:
            return 1;
        case _GET_AWAITABLE__REG:
            return 1;
        case _GET_AWAITABLE__REG_SPILL:
            return 1;
        case _GET_ITER:
            return 1;
        case _GET_ITER__REG:
            return 1;
        case _GET_ITER__REG_SPILL:
            return 1;
        case _GET_LEN:
            return 2;
        case _GET_LEN__REG:
            return 2;
        case _GET_LEN__REG_SPILL:
            return 2;
        case _GET_YIELD_FROM_ITER:
            return 1;
        case _GET_YIELD_FROM_ITER__REG:
            return 1;
        case _GET_YIELD_FROM_ITER__REG_SPILL:
            return 1;
        case _GUARD_BOTH_FLOAT:
            return 2;
        case _GUARD_BOTH_FLOAT__REG:
            return 2;
        case _GUARD_BOTH_FLOAT__REG_SPILL:
            return 2;
        case _GUARD_BOTH_INT:
            return 2;
        case _GUARD_BOTH_INT__REG:
            return 2;
        case _GUARD_BOTH_INT__REG_SPILL:
            return 2;
        case _GUARD_BOTH_UNICODE:
            return 2;
        case _GUARD_BOTH_UNICODE__REG:
            return 2;
        case _GUARD_BOTH_UNICODE__REG_SPILL:
            return 2;
        case _GUARD_BUILTINS_VERSION:
            return 0;
        case _GUARD_DORV_VALUES:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG:
            return 1;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL:
            return 1;
        case _GUARD_DORV_VALUES__REG:
            return 1;
        case _GUARD_DORV_VALUES__REG_SPILL:
            return 1;
        case _GUARD_GLOBALS_VERSION:
            return 0;
        case _GUARD_IS_FALSE_POP:
            return 0;
        case _GUARD_IS_FALSE_POP__REG:
            return 0;
        case _GUARD_IS_FALSE_POP__REG_SPILL:
            return 0;
        case _GUARD_IS_NONE_POP:
            return 0;
        case _GUARD_IS_NONE_POP__REG:
            return 0;
        case _GUARD_IS_NONE_POP__REG_SPILL:
            return 0;
        case _GUARD_IS_NOT_NONE_POP:
            return 0;
        case _GUARD_IS_NOT_NONE_POP__REG:
            return 0;
        case _GUARD_IS_NOT_NONE_POP__REG_SPILL:
            return 0;
        case _GUARD_IS_TRUE_POP:
            return 0;
        case _GUARD_IS_TRUE_POP__REG:
            return 0;
        case _GUARD_IS_TRUE_POP__REG_SPILL:
            return 0;
        case _GUARD_KEYS_VERSION:
            return 1;
        case _GUARD_KEYS_VERSION__REG:
            return 1;
        case _GUARD_KEYS_VERSION__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_LIST__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE__REG:
            return 1;
        case _GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL:
            return 1;
        case _GUARD_TYPE_VERSION:
            return 1;
        case _GUARD_TYPE_VERSION__REG:
            return 1;
        case _GUARD_TYPE_VERSION__REG_SPILL:
            return 1;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS:
            return 2 + oparg;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG:
            return 2 + oparg;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL:
            return 2 + oparg;
        case _INIT_CALL_PY_EXACT_ARGS:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_0:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_0__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_1:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_1__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_2:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_2__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_3:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_3__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_4:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_4__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS__REG:
            return 1;
        case _INIT_CALL_PY_EXACT_ARGS__REG_SPILL:
            return 1;
        case _INTERNAL_INCREMENT_OPT_COUNTER:
            return 0;
        case _INTERNAL_INCREMENT_OPT_COUNTER__REG:
            return 0;
        case _INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL:
            return 0;
        case _IS_NONE:
            return 1;
        case _IS_NONE__REG:
            return 1;
        case _IS_NONE__REG_SPILL:
            return 1;
        case _IS_OP:
            return 1;
        case _IS_OP__REG:
            return 1;
        case _IS_OP__REG_SPILL:
            return 1;
        case _ITER_CHECK_LIST:
            return 1;
        case _ITER_CHECK_LIST__REG:
            return 1;
        case _ITER_CHECK_LIST__REG_SPILL:
            return 1;
        case _ITER_CHECK_RANGE:
            return 1;
        case _ITER_CHECK_RANGE__REG:
            return 1;
        case _ITER_CHECK_RANGE__REG_SPILL:
            return 1;
        case _ITER_CHECK_TUPLE:
            return 1;
        case _ITER_CHECK_TUPLE__REG:
            return 1;
        case _ITER_CHECK_TUPLE__REG_SPILL:
            return 1;
        case _ITER_NEXT_LIST:
            return 2;
        case _ITER_NEXT_LIST__REG:
            return 2;
        case _ITER_NEXT_LIST__REG_SPILL:
            return 2;
        case _ITER_NEXT_RANGE:
            return 2;
        case _ITER_NEXT_RANGE__REG:
            return 2;
        case _ITER_NEXT_RANGE__REG_SPILL:
            return 2;
        case _ITER_NEXT_TUPLE:
            return 2;
        case _ITER_NEXT_TUPLE__REG:
            return 2;
        case _ITER_NEXT_TUPLE__REG_SPILL:
            return 2;
        case _JUMP_TO_TOP:
            return 0;
        case _LIST_APPEND:
            return 1 + (oparg-1);
        case _LIST_APPEND__REG:
            return 1 + (oparg-1);
        case _LIST_APPEND__REG_SPILL:
            return 1 + (oparg-1);
        case _LIST_EXTEND:
            return 1 + (oparg-1);
        case _LIST_EXTEND__REG:
            return 1 + (oparg-1);
        case _LIST_EXTEND__REG_SPILL:
            return 1 + (oparg-1);
        case _LOAD_ASSERTION_ERROR:
            return 1;
        case _LOAD_ASSERTION_ERROR__REG:
            return 1;
        case _LOAD_ASSERTION_ERROR__REG_SPILL:
            return 1;
        case _LOAD_ATTR:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_CLASS:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_CLASS_0:
            return 1;
        case _LOAD_ATTR_CLASS_0__REG:
            return 1;
        case _LOAD_ATTR_CLASS_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_CLASS_1:
            return 2;
        case _LOAD_ATTR_CLASS_1__REG:
            return 2;
        case _LOAD_ATTR_CLASS_1__REG_SPILL:
            return 2;
        case _LOAD_ATTR_CLASS__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_CLASS__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_INSTANCE_VALUE:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_INSTANCE_VALUE_0:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_0__REG:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_INSTANCE_VALUE_1:
            return 2;
        case _LOAD_ATTR_INSTANCE_VALUE_1__REG:
            return 2;
        case _LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL:
            return 2;
        case _LOAD_ATTR_INSTANCE_VALUE__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_INSTANCE_VALUE__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_METHOD_LAZY_DICT:
            return 2;
        case _LOAD_ATTR_METHOD_LAZY_DICT__REG:
            return 2;
        case _LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL:
            return 2;
        case _LOAD_ATTR_METHOD_NO_DICT:
            return 2;
        case _LOAD_ATTR_METHOD_NO_DICT__REG:
            return 2;
        case _LOAD_ATTR_METHOD_NO_DICT__REG_SPILL:
            return 2;
        case _LOAD_ATTR_METHOD_WITH_VALUES:
            return 2;
        case _LOAD_ATTR_METHOD_WITH_VALUES__REG:
            return 2;
        case _LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL:
            return 2;
        case _LOAD_ATTR_MODULE:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_MODULE__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_MODULE__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG:
            return 1;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL:
            return 1;
        case _LOAD_ATTR_SLOT:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_SLOT_0:
            return 1;
        case _LOAD_ATTR_SLOT_0__REG:
            return 1;
        case _LOAD_ATTR_SLOT_0__REG_SPILL:
            return 1;
        case _LOAD_ATTR_SLOT_1:
            return 2;
        case _LOAD_ATTR_SLOT_1__REG:
            return 2;
        case _LOAD_ATTR_SLOT_1__REG_SPILL:
            return 2;
        case _LOAD_ATTR_SLOT__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_SLOT__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_WITH_HINT:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_WITH_HINT__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR_WITH_HINT__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_ATTR__REG:
            return 1 + (oparg & 1);
        case _LOAD_ATTR__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_BUILD_CLASS:
            return 1;
        case _LOAD_BUILD_CLASS__REG:
            return 1;
        case _LOAD_BUILD_CLASS__REG_SPILL:
            return 1;
        case _LOAD_CONST:
            return 1;
        case _LOAD_CONST_INLINE:
            return 1;
        case _LOAD_CONST_INLINE_BORROW:
            return 1;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL:
            return 2;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG:
            return 2;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL:
            return 2;
        case _LOAD_CONST_INLINE_BORROW__REG:
            return 1;
        case _LOAD_CONST_INLINE_BORROW__REG_SPILL:
            return 1;
        case _LOAD_CONST_INLINE_WITH_NULL:
            return 2;
        case _LOAD_CONST_INLINE_WITH_NULL__REG:
            return 2;
        case _LOAD_CONST_INLINE_WITH_NULL__REG_SPILL:
            return 2;
        case _LOAD_CONST_INLINE__REG:
            return 1;
        case _LOAD_CONST_INLINE__REG_SPILL:
            return 1;
        case _LOAD_CONST__REG:
            return 1;
        case _LOAD_CONST__REG_SPILL:
            return 1;
        case _LOAD_DEREF:
            return 1;
        case _LOAD_DEREF__REG:
            return 1;
        case _LOAD_DEREF__REG_SPILL:
            return 1;
        case _LOAD_FAST:
            return 1;
        case _LOAD_FAST_0:
            return 1;
        case _LOAD_FAST_0__REG:
            return 1;
        case _LOAD_FAST_0__REG_SPILL:
            return 1;
        case _LOAD_FAST_1:
            return 1;
        case _LOAD_FAST_1__REG:
            return 1;
        case _LOAD_FAST_1__REG_SPILL:
            return 1;
        case _LOAD_FAST_2:
            return 1;
        case _LOAD_FAST_2__REG:
            return 1;
        case _LOAD_FAST_2__REG_SPILL:
            return 1;
        case _LOAD_FAST_3:
            return 1;
        case _LOAD_FAST_3__REG:
            return 1;
        case _LOAD_FAST_3__REG_SPILL:
            return 1;
        case _LOAD_FAST_4:
            return 1;
        case _LOAD_FAST_4__REG:
            return 1;
        case _LOAD_FAST_4__REG_SPILL:
            return 1;
        case _LOAD_FAST_5:
            return 1;
        case _LOAD_FAST_5__REG:
            return 1;
        case _LOAD_FAST_5__REG_SPILL:
            return 1;
        case _LOAD_FAST_6:
            return 1;
        case _LOAD_FAST_6__REG:
            return 1;
        case _LOAD_FAST_6__REG_SPILL:
            return 1;
        case _LOAD_FAST_7:
            return 1;
        case _LOAD_FAST_7__REG:
            return 1;
        case _LOAD_FAST_7__REG_SPILL:
            return 1;
        case _LOAD_FAST_AND_CLEAR:
            return 1;
        case _LOAD_FAST_AND_CLEAR__REG:
            return 1;
        case _LOAD_FAST_AND_CLEAR__REG_SPILL:
            return 1;
        case _LOAD_FAST_CHECK:
            return 1;
        case _LOAD_FAST_CHECK__REG:
            return 1;
        case _LOAD_FAST_CHECK__REG_SPILL:
            return 1;
        case _LOAD_FAST_LOAD_FAST:
            return 2;
        case _LOAD_FAST_LOAD_FAST__REG:
            return 2;
        case _LOAD_FAST_LOAD_FAST__REG_SPILL:
            return 2;
        case _LOAD_FAST__REG:
            return 1;
        case _LOAD_FAST__REG_SPILL:
            return 1;
        case _LOAD_FROM_DICT_OR_DEREF:
            return 1;
        case _LOAD_FROM_DICT_OR_DEREF__REG:
            return 1;
        case _LOAD_FROM_DICT_OR_DEREF__REG_SPILL:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS__REG:
            return 1;
        case _LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL:
            return 1;
        case _LOAD_GLOBAL:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_BUILTINS:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_BUILTINS__REG:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_BUILTINS__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_MODULE:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_MODULE__REG:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL_MODULE__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL__REG:
            return 1 + (oparg & 1);
        case _LOAD_GLOBAL__REG_SPILL:
            return 1 + (oparg & 1);
        case _LOAD_LOCALS:
            return 1;
        case _LOAD_LOCALS__REG:
            return 1;
        case _LOAD_LOCALS__REG_SPILL:
            return 1;
        case _LOAD_NAME:
            return 1;
        case _LOAD_NAME__REG:
            return 1;
        case _LOAD_NAME__REG_SPILL:
            return 1;
        case _LOAD_SUPER_ATTR_ATTR:
            return 1;
        case _LOAD_SUPER_ATTR_ATTR__REG:
            return 1;
        case _LOAD_SUPER_ATTR_ATTR__REG_SPILL:
            return 1;
        case _LOAD_SUPER_ATTR_METHOD:
            return 2;
        case _LOAD_SUPER_ATTR_METHOD__REG:
            return 2;
        case _LOAD_SUPER_ATTR_METHOD__REG_SPILL:
            return 2;
        case _MAKE_CELL:
            return 0;
        case _MAKE_FUNCTION:
            return 1;
        case _MAKE_FUNCTION__REG:
            return 1;
        case _MAKE_FUNCTION__REG_SPILL:
            return 1;
        case _MAP_ADD:
            return 1 + (oparg - 1);
        case _MAP_ADD__REG:
            return 1 + (oparg - 1);
        case _MAP_ADD__REG_SPILL:
            return 1 + (oparg - 1);
        case _MATCH_CLASS:
            return 1;
        case _MATCH_CLASS__REG:
            return 1;
        case _MATCH_CLASS__REG_SPILL:
            return 1;
        case _MATCH_KEYS:
            return 3;
        case _MATCH_KEYS__REG:
            return 3;
        case _MATCH_KEYS__REG_SPILL:
            return 3;
        case _MATCH_MAPPING:
            return 2;
        case _MATCH_MAPPING__REG:
            return 2;
        case _MATCH_MAPPING__REG_SPILL:
            return 2;
        case _MATCH_SEQUENCE:
            return 2;
        case _MATCH_SEQUENCE__REG:
            return 2;
        case _MATCH_SEQUENCE__REG_SPILL:
            return 2;
        case _NOP:
            return 0;
        case _POP_EXCEPT:
            return 0;
        case _POP_EXCEPT__REG:
            return 0;
        case _POP_EXCEPT__REG_SPILL:
            return 0;
        case _POP_FRAME:
            return 0;
        case _POP_FRAME__REG:
            return 0;
        case _POP_FRAME__REG_SPILL:
            return 0;
        case _POP_TOP:
            return 0;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW:
            return 1;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW__REG:
            return 1;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL:
            return 1;
        case _POP_TOP__REG:
            return 0;
        case _POP_TOP__REG_SPILL:
            return 0;
        case _PUSH_EXC_INFO:
            return 2;
        case _PUSH_EXC_INFO__REG:
            return 2;
        case _PUSH_EXC_INFO__REG_SPILL:
            return 2;
        case _PUSH_FRAME:
            return 0;
        case _PUSH_FRAME__REG:
            return 0;
        case _PUSH_FRAME__REG_SPILL:
            return 0;
        case _PUSH_NULL:
            return 1;
        case _PUSH_NULL__REG:
            return 1;
        case _PUSH_NULL__REG_SPILL:
            return 1;
        case _REG_SPILL_0:
            return 1;
        case _REG_SPILL_0_1:
            return 2;
        case _REG_SPILL_0_1_2:
            return 3;
        case _REG_SPILL_0_1_2__REG:
            return 3;
        case _REG_SPILL_0_1_2__REG_SPILL:
            return 3;
        case _REG_SPILL_0_1__REG:
            return 2;
        case _REG_SPILL_0_1__REG_SPILL:
            return 2;
        case _REG_SPILL_0__REG:
            return 1;
        case _REG_SPILL_0__REG_SPILL:
            return 1;
        case _REPLACE_WITH_TRUE:
            return 1;
        case _REPLACE_WITH_TRUE__REG:
            return 1;
        case _REPLACE_WITH_TRUE__REG_SPILL:
            return 1;
        case _RESUME_CHECK:
            return 0;
        case _SAVE_RETURN_OFFSET:
            return 0;
        case _SETUP_ANNOTATIONS:
            return 0;
        case _SET_ADD:
            return 1 + (oparg-1);
        case _SET_ADD__REG:
            return 1 + (oparg-1);
        case _SET_ADD__REG_SPILL:
            return 1 + (oparg-1);
        case _SET_FUNCTION_ATTRIBUTE:
            return 1;
        case _SET_FUNCTION_ATTRIBUTE__REG:
            return 1;
        case _SET_FUNCTION_ATTRIBUTE__REG_SPILL:
            return 1;
        case _SET_IP:
            return 0;
        case _SET_UPDATE:
            return 1 + (oparg-1);
        case _SET_UPDATE__REG:
            return 1 + (oparg-1);
        case _SET_UPDATE__REG_SPILL:
            return 1 + (oparg-1);
        case _START_EXECUTOR:
            return 0;
        case _STORE_ATTR:
            return 0;
        case _STORE_ATTR_INSTANCE_VALUE:
            return 0;
        case _STORE_ATTR_INSTANCE_VALUE__REG:
            return 0;
        case _STORE_ATTR_INSTANCE_VALUE__REG_SPILL:
            return 0;
        case _STORE_ATTR_SLOT:
            return 0;
        case _STORE_ATTR_SLOT__REG:
            return 0;
        case _STORE_ATTR_SLOT__REG_SPILL:
            return 0;
        case _STORE_ATTR__REG:
            return 0;
        case _STORE_ATTR__REG_SPILL:
            return 0;
        case _STORE_DEREF:
            return 0;
        case _STORE_DEREF__REG:
            return 0;
        case _STORE_DEREF__REG_SPILL:
            return 0;
        case _STORE_FAST:
            return 0;
        case _STORE_FAST_0:
            return 0;
        case _STORE_FAST_0__REG:
            return 0;
        case _STORE_FAST_0__REG_SPILL:
            return 0;
        case _STORE_FAST_1:
            return 0;
        case _STORE_FAST_1__REG:
            return 0;
        case _STORE_FAST_1__REG_SPILL:
            return 0;
        case _STORE_FAST_2:
            return 0;
        case _STORE_FAST_2__REG:
            return 0;
        case _STORE_FAST_2__REG_SPILL:
            return 0;
        case _STORE_FAST_3:
            return 0;
        case _STORE_FAST_3__REG:
            return 0;
        case _STORE_FAST_3__REG_SPILL:
            return 0;
        case _STORE_FAST_4:
            return 0;
        case _STORE_FAST_4__REG:
            return 0;
        case _STORE_FAST_4__REG_SPILL:
            return 0;
        case _STORE_FAST_5:
            return 0;
        case _STORE_FAST_5__REG:
            return 0;
        case _STORE_FAST_5__REG_SPILL:
            return 0;
        case _STORE_FAST_6:
            return 0;
        case _STORE_FAST_6__REG:
            return 0;
        case _STORE_FAST_6__REG_SPILL:
            return 0;
        case _STORE_FAST_7:
            return 0;
        case _STORE_FAST_7__REG:
            return 0;
        case _STORE_FAST_7__REG_SPILL:
            return 0;
        case _STORE_FAST_LOAD_FAST:
            return 1;
        case _STORE_FAST_LOAD_FAST__REG:
            return 1;
        case _STORE_FAST_LOAD_FAST__REG_SPILL:
            return 1;
        case _STORE_FAST_STORE_FAST:
            return 0;
        case _STORE_FAST_STORE_FAST__REG:
            return 0;
        case _STORE_FAST_STORE_FAST__REG_SPILL:
            return 0;
        case _STORE_FAST__REG:
            return 0;
        case _STORE_FAST__REG_SPILL:
            return 0;
        case _STORE_GLOBAL:
            return 0;
        case _STORE_GLOBAL__REG:
            return 0;
        case _STORE_GLOBAL__REG_SPILL:
            return 0;
        case _STORE_NAME:
            return 0;
        case _STORE_NAME__REG:
            return 0;
        case _STORE_NAME__REG_SPILL:
            return 0;
        case _STORE_SLICE:
            return 0;
        case _STORE_SLICE__REG:
            return 0;
        case _STORE_SLICE__REG_SPILL:
            return 0;
        case _STORE_SUBSCR:
            return 0;
        case _STORE_SUBSCR_DICT:
            return 0;
        case _STORE_SUBSCR_DICT__REG:
            return 0;
        case _STORE_SUBSCR_DICT__REG_SPILL:
            return 0;
        case _STORE_SUBSCR_LIST_INT:
            return 0;
        case _STORE_SUBSCR_LIST_INT__REG:
            return 0;
        case _STORE_SUBSCR_LIST_INT__REG_SPILL:
            return 0;
        case _STORE_SUBSCR__REG:
            return 0;
        case _STORE_SUBSCR__REG_SPILL:
            return 0;
        case _SWAP:
            return 2 + (oparg-2);
        case _SWAP__REG:
            return 2 + (oparg-2);
        case _SWAP__REG_SPILL:
            return 2 + (oparg-2);
        case _TO_BOOL:
            return 1;
        case _TO_BOOL_BOOL:
            return 1;
        case _TO_BOOL_BOOL__REG:
            return 1;
        case _TO_BOOL_BOOL__REG_SPILL:
            return 1;
        case _TO_BOOL_INT:
            return 1;
        case _TO_BOOL_INT__REG:
            return 1;
        case _TO_BOOL_INT__REG_SPILL:
            return 1;
        case _TO_BOOL_LIST:
            return 1;
        case _TO_BOOL_LIST__REG:
            return 1;
        case _TO_BOOL_LIST__REG_SPILL:
            return 1;
        case _TO_BOOL_NONE:
            return 1;
        case _TO_BOOL_NONE__REG:
            return 1;
        case _TO_BOOL_NONE__REG_SPILL:
            return 1;
        case _TO_BOOL_STR:
            return 1;
        case _TO_BOOL_STR__REG:
            return 1;
        case _TO_BOOL_STR__REG_SPILL:
            return 1;
        case _TO_BOOL__REG:
            return 1;
        case _TO_BOOL__REG_SPILL:
            return 1;
        case _UNARY_INVERT:
            return 1;
        case _UNARY_INVERT__REG:
            return 1;
        case _UNARY_INVERT__REG_SPILL:
            return 1;
        case _UNARY_NEGATIVE:
            return 1;
        case _UNARY_NEGATIVE__REG:
            return 1;
        case _UNARY_NEGATIVE__REG_SPILL:
            return 1;
        case _UNARY_NOT:
            return 1;
        case _UNARY_NOT__REG:
            return 1;
        case _UNARY_NOT__REG_SPILL:
            return 1;
        case _UNPACK_EX:
            return 1 + (oparg >> 8) + (oparg & 0xFF);
        case _UNPACK_EX__REG:
            return 1 + (oparg >> 8) + (oparg & 0xFF);
        case _UNPACK_EX__REG_SPILL:
            return 1 + (oparg >> 8) + (oparg & 0xFF);
        case _UNPACK_SEQUENCE:
            return oparg;
        case _UNPACK_SEQUENCE_LIST:
            return oparg;
        case _UNPACK_SEQUENCE_LIST__REG:
            return oparg;
        case _UNPACK_SEQUENCE_LIST__REG_SPILL:
            return oparg;
        case _UNPACK_SEQUENCE_TUPLE:
            return oparg;
        case _UNPACK_SEQUENCE_TUPLE__REG:
            return oparg;
        case _UNPACK_SEQUENCE_TUPLE__REG_SPILL:
            return oparg;
        case _UNPACK_SEQUENCE_TWO_TUPLE:
            return oparg;
        case _UNPACK_SEQUENCE_TWO_TUPLE__REG:
            return oparg;
        case _UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL:
            return oparg;
        case _UNPACK_SEQUENCE__REG:
            return oparg;
        case _UNPACK_SEQUENCE__REG_SPILL:
            return oparg;
        case _WITH_EXCEPT_START:
            return 5;
        case _WITH_EXCEPT_START__REG:
            return 5;
        case _WITH_EXCEPT_START__REG_SPILL:
            return 5;
        default:
            return -1;
    }
}

#endif

extern int _PyUop_match_reg(uint32_t opcode, int should_spill);
#ifdef NEED_OPCODE_METADATA
int _PyUop_match_reg(uint32_t opcode, int should_spill)  {
    switch(opcode) {
        case _LOAD_FAST_CHECK:
            return should_spill ? _LOAD_FAST_CHECK__REG_SPILL : _LOAD_FAST_CHECK__REG;
        case _LOAD_FAST_0:
            return should_spill ? _LOAD_FAST_0__REG_SPILL : _LOAD_FAST_0__REG;
        case _LOAD_FAST_1:
            return should_spill ? _LOAD_FAST_1__REG_SPILL : _LOAD_FAST_1__REG;
        case _LOAD_FAST_2:
            return should_spill ? _LOAD_FAST_2__REG_SPILL : _LOAD_FAST_2__REG;
        case _LOAD_FAST_3:
            return should_spill ? _LOAD_FAST_3__REG_SPILL : _LOAD_FAST_3__REG;
        case _LOAD_FAST_4:
            return should_spill ? _LOAD_FAST_4__REG_SPILL : _LOAD_FAST_4__REG;
        case _LOAD_FAST_5:
            return should_spill ? _LOAD_FAST_5__REG_SPILL : _LOAD_FAST_5__REG;
        case _LOAD_FAST_6:
            return should_spill ? _LOAD_FAST_6__REG_SPILL : _LOAD_FAST_6__REG;
        case _LOAD_FAST_7:
            return should_spill ? _LOAD_FAST_7__REG_SPILL : _LOAD_FAST_7__REG;
        case _LOAD_FAST:
            return should_spill ? _LOAD_FAST__REG_SPILL : _LOAD_FAST__REG;
        case _LOAD_FAST_AND_CLEAR:
            return should_spill ? _LOAD_FAST_AND_CLEAR__REG_SPILL : _LOAD_FAST_AND_CLEAR__REG;
        case _LOAD_FAST_LOAD_FAST:
            return should_spill ? _LOAD_FAST_LOAD_FAST__REG_SPILL : _LOAD_FAST_LOAD_FAST__REG;
        case _LOAD_CONST:
            return should_spill ? _LOAD_CONST__REG_SPILL : _LOAD_CONST__REG;
        case _STORE_FAST_0:
            return should_spill ? _STORE_FAST_0__REG_SPILL : _STORE_FAST_0__REG;
        case _STORE_FAST_1:
            return should_spill ? _STORE_FAST_1__REG_SPILL : _STORE_FAST_1__REG;
        case _STORE_FAST_2:
            return should_spill ? _STORE_FAST_2__REG_SPILL : _STORE_FAST_2__REG;
        case _STORE_FAST_3:
            return should_spill ? _STORE_FAST_3__REG_SPILL : _STORE_FAST_3__REG;
        case _STORE_FAST_4:
            return should_spill ? _STORE_FAST_4__REG_SPILL : _STORE_FAST_4__REG;
        case _STORE_FAST_5:
            return should_spill ? _STORE_FAST_5__REG_SPILL : _STORE_FAST_5__REG;
        case _STORE_FAST_6:
            return should_spill ? _STORE_FAST_6__REG_SPILL : _STORE_FAST_6__REG;
        case _STORE_FAST_7:
            return should_spill ? _STORE_FAST_7__REG_SPILL : _STORE_FAST_7__REG;
        case _STORE_FAST:
            return should_spill ? _STORE_FAST__REG_SPILL : _STORE_FAST__REG;
        case _STORE_FAST_LOAD_FAST:
            return should_spill ? _STORE_FAST_LOAD_FAST__REG_SPILL : _STORE_FAST_LOAD_FAST__REG;
        case _STORE_FAST_STORE_FAST:
            return should_spill ? _STORE_FAST_STORE_FAST__REG_SPILL : _STORE_FAST_STORE_FAST__REG;
        case _POP_TOP:
            return should_spill ? _POP_TOP__REG_SPILL : _POP_TOP__REG;
        case _PUSH_NULL:
            return should_spill ? _PUSH_NULL__REG_SPILL : _PUSH_NULL__REG;
        case _END_SEND:
            return should_spill ? _END_SEND__REG_SPILL : _END_SEND__REG;
        case _UNARY_NEGATIVE:
            return should_spill ? _UNARY_NEGATIVE__REG_SPILL : _UNARY_NEGATIVE__REG;
        case _UNARY_NOT:
            return should_spill ? _UNARY_NOT__REG_SPILL : _UNARY_NOT__REG;
        case _TO_BOOL:
            return should_spill ? _TO_BOOL__REG_SPILL : _TO_BOOL__REG;
        case _TO_BOOL_BOOL:
            return should_spill ? _TO_BOOL_BOOL__REG_SPILL : _TO_BOOL_BOOL__REG;
        case _TO_BOOL_INT:
            return should_spill ? _TO_BOOL_INT__REG_SPILL : _TO_BOOL_INT__REG;
        case _TO_BOOL_LIST:
            return should_spill ? _TO_BOOL_LIST__REG_SPILL : _TO_BOOL_LIST__REG;
        case _TO_BOOL_NONE:
            return should_spill ? _TO_BOOL_NONE__REG_SPILL : _TO_BOOL_NONE__REG;
        case _TO_BOOL_STR:
            return should_spill ? _TO_BOOL_STR__REG_SPILL : _TO_BOOL_STR__REG;
        case _REPLACE_WITH_TRUE:
            return should_spill ? _REPLACE_WITH_TRUE__REG_SPILL : _REPLACE_WITH_TRUE__REG;
        case _UNARY_INVERT:
            return should_spill ? _UNARY_INVERT__REG_SPILL : _UNARY_INVERT__REG;
        case _GUARD_BOTH_INT:
            return should_spill ? _GUARD_BOTH_INT__REG_SPILL : _GUARD_BOTH_INT__REG;
        case _BINARY_OP_MULTIPLY_INT:
            return should_spill ? _BINARY_OP_MULTIPLY_INT__REG_SPILL : _BINARY_OP_MULTIPLY_INT__REG;
        case _BINARY_OP_ADD_INT:
            return should_spill ? _BINARY_OP_ADD_INT__REG_SPILL : _BINARY_OP_ADD_INT__REG;
        case _BINARY_OP_SUBTRACT_INT:
            return should_spill ? _BINARY_OP_SUBTRACT_INT__REG_SPILL : _BINARY_OP_SUBTRACT_INT__REG;
        case _GUARD_BOTH_FLOAT:
            return should_spill ? _GUARD_BOTH_FLOAT__REG_SPILL : _GUARD_BOTH_FLOAT__REG;
        case _BINARY_OP_MULTIPLY_FLOAT:
            return should_spill ? _BINARY_OP_MULTIPLY_FLOAT__REG_SPILL : _BINARY_OP_MULTIPLY_FLOAT__REG;
        case _BINARY_OP_ADD_FLOAT:
            return should_spill ? _BINARY_OP_ADD_FLOAT__REG_SPILL : _BINARY_OP_ADD_FLOAT__REG;
        case _BINARY_OP_SUBTRACT_FLOAT:
            return should_spill ? _BINARY_OP_SUBTRACT_FLOAT__REG_SPILL : _BINARY_OP_SUBTRACT_FLOAT__REG;
        case _GUARD_BOTH_UNICODE:
            return should_spill ? _GUARD_BOTH_UNICODE__REG_SPILL : _GUARD_BOTH_UNICODE__REG;
        case _BINARY_OP_ADD_UNICODE:
            return should_spill ? _BINARY_OP_ADD_UNICODE__REG_SPILL : _BINARY_OP_ADD_UNICODE__REG;
        case _BINARY_SUBSCR:
            return should_spill ? _BINARY_SUBSCR__REG_SPILL : _BINARY_SUBSCR__REG;
        case _BINARY_SLICE:
            return should_spill ? _BINARY_SLICE__REG_SPILL : _BINARY_SLICE__REG;
        case _STORE_SLICE:
            return should_spill ? _STORE_SLICE__REG_SPILL : _STORE_SLICE__REG;
        case _BINARY_SUBSCR_LIST_INT:
            return should_spill ? _BINARY_SUBSCR_LIST_INT__REG_SPILL : _BINARY_SUBSCR_LIST_INT__REG;
        case _BINARY_SUBSCR_STR_INT:
            return should_spill ? _BINARY_SUBSCR_STR_INT__REG_SPILL : _BINARY_SUBSCR_STR_INT__REG;
        case _BINARY_SUBSCR_TUPLE_INT:
            return should_spill ? _BINARY_SUBSCR_TUPLE_INT__REG_SPILL : _BINARY_SUBSCR_TUPLE_INT__REG;
        case _BINARY_SUBSCR_DICT:
            return should_spill ? _BINARY_SUBSCR_DICT__REG_SPILL : _BINARY_SUBSCR_DICT__REG;
        case _LIST_APPEND:
            return should_spill ? _LIST_APPEND__REG_SPILL : _LIST_APPEND__REG;
        case _SET_ADD:
            return should_spill ? _SET_ADD__REG_SPILL : _SET_ADD__REG;
        case _STORE_SUBSCR:
            return should_spill ? _STORE_SUBSCR__REG_SPILL : _STORE_SUBSCR__REG;
        case _STORE_SUBSCR_LIST_INT:
            return should_spill ? _STORE_SUBSCR_LIST_INT__REG_SPILL : _STORE_SUBSCR_LIST_INT__REG;
        case _STORE_SUBSCR_DICT:
            return should_spill ? _STORE_SUBSCR_DICT__REG_SPILL : _STORE_SUBSCR_DICT__REG;
        case _DELETE_SUBSCR:
            return should_spill ? _DELETE_SUBSCR__REG_SPILL : _DELETE_SUBSCR__REG;
        case _CALL_INTRINSIC_1:
            return should_spill ? _CALL_INTRINSIC_1__REG_SPILL : _CALL_INTRINSIC_1__REG;
        case _CALL_INTRINSIC_2:
            return should_spill ? _CALL_INTRINSIC_2__REG_SPILL : _CALL_INTRINSIC_2__REG;
        case _POP_FRAME:
            return should_spill ? _POP_FRAME__REG_SPILL : _POP_FRAME__REG;
        case _GET_AITER:
            return should_spill ? _GET_AITER__REG_SPILL : _GET_AITER__REG;
        case _GET_ANEXT:
            return should_spill ? _GET_ANEXT__REG_SPILL : _GET_ANEXT__REG;
        case _GET_AWAITABLE:
            return should_spill ? _GET_AWAITABLE__REG_SPILL : _GET_AWAITABLE__REG;
        case _POP_EXCEPT:
            return should_spill ? _POP_EXCEPT__REG_SPILL : _POP_EXCEPT__REG;
        case _LOAD_ASSERTION_ERROR:
            return should_spill ? _LOAD_ASSERTION_ERROR__REG_SPILL : _LOAD_ASSERTION_ERROR__REG;
        case _LOAD_BUILD_CLASS:
            return should_spill ? _LOAD_BUILD_CLASS__REG_SPILL : _LOAD_BUILD_CLASS__REG;
        case _STORE_NAME:
            return should_spill ? _STORE_NAME__REG_SPILL : _STORE_NAME__REG;
        case _UNPACK_SEQUENCE:
            return should_spill ? _UNPACK_SEQUENCE__REG_SPILL : _UNPACK_SEQUENCE__REG;
        case _UNPACK_SEQUENCE_TWO_TUPLE:
            return should_spill ? _UNPACK_SEQUENCE_TWO_TUPLE__REG_SPILL : _UNPACK_SEQUENCE_TWO_TUPLE__REG;
        case _UNPACK_SEQUENCE_TUPLE:
            return should_spill ? _UNPACK_SEQUENCE_TUPLE__REG_SPILL : _UNPACK_SEQUENCE_TUPLE__REG;
        case _UNPACK_SEQUENCE_LIST:
            return should_spill ? _UNPACK_SEQUENCE_LIST__REG_SPILL : _UNPACK_SEQUENCE_LIST__REG;
        case _UNPACK_EX:
            return should_spill ? _UNPACK_EX__REG_SPILL : _UNPACK_EX__REG;
        case _STORE_ATTR:
            return should_spill ? _STORE_ATTR__REG_SPILL : _STORE_ATTR__REG;
        case _DELETE_ATTR:
            return should_spill ? _DELETE_ATTR__REG_SPILL : _DELETE_ATTR__REG;
        case _STORE_GLOBAL:
            return should_spill ? _STORE_GLOBAL__REG_SPILL : _STORE_GLOBAL__REG;
        case _LOAD_LOCALS:
            return should_spill ? _LOAD_LOCALS__REG_SPILL : _LOAD_LOCALS__REG;
        case _LOAD_FROM_DICT_OR_GLOBALS:
            return should_spill ? _LOAD_FROM_DICT_OR_GLOBALS__REG_SPILL : _LOAD_FROM_DICT_OR_GLOBALS__REG;
        case _LOAD_NAME:
            return should_spill ? _LOAD_NAME__REG_SPILL : _LOAD_NAME__REG;
        case _LOAD_GLOBAL:
            return should_spill ? _LOAD_GLOBAL__REG_SPILL : _LOAD_GLOBAL__REG;
        case _LOAD_GLOBAL_MODULE:
            return should_spill ? _LOAD_GLOBAL_MODULE__REG_SPILL : _LOAD_GLOBAL_MODULE__REG;
        case _LOAD_GLOBAL_BUILTINS:
            return should_spill ? _LOAD_GLOBAL_BUILTINS__REG_SPILL : _LOAD_GLOBAL_BUILTINS__REG;
        case _LOAD_FROM_DICT_OR_DEREF:
            return should_spill ? _LOAD_FROM_DICT_OR_DEREF__REG_SPILL : _LOAD_FROM_DICT_OR_DEREF__REG;
        case _LOAD_DEREF:
            return should_spill ? _LOAD_DEREF__REG_SPILL : _LOAD_DEREF__REG;
        case _STORE_DEREF:
            return should_spill ? _STORE_DEREF__REG_SPILL : _STORE_DEREF__REG;
        case _BUILD_STRING:
            return should_spill ? _BUILD_STRING__REG_SPILL : _BUILD_STRING__REG;
        case _BUILD_TUPLE:
            return should_spill ? _BUILD_TUPLE__REG_SPILL : _BUILD_TUPLE__REG;
        case _BUILD_LIST:
            return should_spill ? _BUILD_LIST__REG_SPILL : _BUILD_LIST__REG;
        case _LIST_EXTEND:
            return should_spill ? _LIST_EXTEND__REG_SPILL : _LIST_EXTEND__REG;
        case _SET_UPDATE:
            return should_spill ? _SET_UPDATE__REG_SPILL : _SET_UPDATE__REG;
        case _BUILD_SET:
            return should_spill ? _BUILD_SET__REG_SPILL : _BUILD_SET__REG;
        case _BUILD_MAP:
            return should_spill ? _BUILD_MAP__REG_SPILL : _BUILD_MAP__REG;
        case _BUILD_CONST_KEY_MAP:
            return should_spill ? _BUILD_CONST_KEY_MAP__REG_SPILL : _BUILD_CONST_KEY_MAP__REG;
        case _DICT_UPDATE:
            return should_spill ? _DICT_UPDATE__REG_SPILL : _DICT_UPDATE__REG;
        case _DICT_MERGE:
            return should_spill ? _DICT_MERGE__REG_SPILL : _DICT_MERGE__REG;
        case _MAP_ADD:
            return should_spill ? _MAP_ADD__REG_SPILL : _MAP_ADD__REG;
        case _LOAD_SUPER_ATTR_ATTR:
            return should_spill ? _LOAD_SUPER_ATTR_ATTR__REG_SPILL : _LOAD_SUPER_ATTR_ATTR__REG;
        case _LOAD_SUPER_ATTR_METHOD:
            return should_spill ? _LOAD_SUPER_ATTR_METHOD__REG_SPILL : _LOAD_SUPER_ATTR_METHOD__REG;
        case _LOAD_ATTR:
            return should_spill ? _LOAD_ATTR__REG_SPILL : _LOAD_ATTR__REG;
        case _GUARD_TYPE_VERSION:
            return should_spill ? _GUARD_TYPE_VERSION__REG_SPILL : _GUARD_TYPE_VERSION__REG;
        case _CHECK_MANAGED_OBJECT_HAS_VALUES:
            return should_spill ? _CHECK_MANAGED_OBJECT_HAS_VALUES__REG_SPILL : _CHECK_MANAGED_OBJECT_HAS_VALUES__REG;
        case _LOAD_ATTR_INSTANCE_VALUE_0:
            return should_spill ? _LOAD_ATTR_INSTANCE_VALUE_0__REG_SPILL : _LOAD_ATTR_INSTANCE_VALUE_0__REG;
        case _LOAD_ATTR_INSTANCE_VALUE_1:
            return should_spill ? _LOAD_ATTR_INSTANCE_VALUE_1__REG_SPILL : _LOAD_ATTR_INSTANCE_VALUE_1__REG;
        case _LOAD_ATTR_INSTANCE_VALUE:
            return should_spill ? _LOAD_ATTR_INSTANCE_VALUE__REG_SPILL : _LOAD_ATTR_INSTANCE_VALUE__REG;
        case _CHECK_ATTR_MODULE:
            return should_spill ? _CHECK_ATTR_MODULE__REG_SPILL : _CHECK_ATTR_MODULE__REG;
        case _LOAD_ATTR_MODULE:
            return should_spill ? _LOAD_ATTR_MODULE__REG_SPILL : _LOAD_ATTR_MODULE__REG;
        case _CHECK_ATTR_WITH_HINT:
            return should_spill ? _CHECK_ATTR_WITH_HINT__REG_SPILL : _CHECK_ATTR_WITH_HINT__REG;
        case _LOAD_ATTR_WITH_HINT:
            return should_spill ? _LOAD_ATTR_WITH_HINT__REG_SPILL : _LOAD_ATTR_WITH_HINT__REG;
        case _LOAD_ATTR_SLOT_0:
            return should_spill ? _LOAD_ATTR_SLOT_0__REG_SPILL : _LOAD_ATTR_SLOT_0__REG;
        case _LOAD_ATTR_SLOT_1:
            return should_spill ? _LOAD_ATTR_SLOT_1__REG_SPILL : _LOAD_ATTR_SLOT_1__REG;
        case _LOAD_ATTR_SLOT:
            return should_spill ? _LOAD_ATTR_SLOT__REG_SPILL : _LOAD_ATTR_SLOT__REG;
        case _CHECK_ATTR_CLASS:
            return should_spill ? _CHECK_ATTR_CLASS__REG_SPILL : _CHECK_ATTR_CLASS__REG;
        case _LOAD_ATTR_CLASS_0:
            return should_spill ? _LOAD_ATTR_CLASS_0__REG_SPILL : _LOAD_ATTR_CLASS_0__REG;
        case _LOAD_ATTR_CLASS_1:
            return should_spill ? _LOAD_ATTR_CLASS_1__REG_SPILL : _LOAD_ATTR_CLASS_1__REG;
        case _LOAD_ATTR_CLASS:
            return should_spill ? _LOAD_ATTR_CLASS__REG_SPILL : _LOAD_ATTR_CLASS__REG;
        case _GUARD_DORV_VALUES:
            return should_spill ? _GUARD_DORV_VALUES__REG_SPILL : _GUARD_DORV_VALUES__REG;
        case _STORE_ATTR_INSTANCE_VALUE:
            return should_spill ? _STORE_ATTR_INSTANCE_VALUE__REG_SPILL : _STORE_ATTR_INSTANCE_VALUE__REG;
        case _STORE_ATTR_SLOT:
            return should_spill ? _STORE_ATTR_SLOT__REG_SPILL : _STORE_ATTR_SLOT__REG;
        case _COMPARE_OP:
            return should_spill ? _COMPARE_OP__REG_SPILL : _COMPARE_OP__REG;
        case _COMPARE_OP_FLOAT:
            return should_spill ? _COMPARE_OP_FLOAT__REG_SPILL : _COMPARE_OP_FLOAT__REG;
        case _COMPARE_OP_INT:
            return should_spill ? _COMPARE_OP_INT__REG_SPILL : _COMPARE_OP_INT__REG;
        case _COMPARE_OP_STR:
            return should_spill ? _COMPARE_OP_STR__REG_SPILL : _COMPARE_OP_STR__REG;
        case _IS_OP:
            return should_spill ? _IS_OP__REG_SPILL : _IS_OP__REG;
        case _CONTAINS_OP:
            return should_spill ? _CONTAINS_OP__REG_SPILL : _CONTAINS_OP__REG;
        case _CONTAINS_OP_SET:
            return should_spill ? _CONTAINS_OP_SET__REG_SPILL : _CONTAINS_OP_SET__REG;
        case _CONTAINS_OP_DICT:
            return should_spill ? _CONTAINS_OP_DICT__REG_SPILL : _CONTAINS_OP_DICT__REG;
        case _CHECK_EG_MATCH:
            return should_spill ? _CHECK_EG_MATCH__REG_SPILL : _CHECK_EG_MATCH__REG;
        case _CHECK_EXC_MATCH:
            return should_spill ? _CHECK_EXC_MATCH__REG_SPILL : _CHECK_EXC_MATCH__REG;
        case _IS_NONE:
            return should_spill ? _IS_NONE__REG_SPILL : _IS_NONE__REG;
        case _GET_LEN:
            return should_spill ? _GET_LEN__REG_SPILL : _GET_LEN__REG;
        case _MATCH_CLASS:
            return should_spill ? _MATCH_CLASS__REG_SPILL : _MATCH_CLASS__REG;
        case _MATCH_MAPPING:
            return should_spill ? _MATCH_MAPPING__REG_SPILL : _MATCH_MAPPING__REG;
        case _MATCH_SEQUENCE:
            return should_spill ? _MATCH_SEQUENCE__REG_SPILL : _MATCH_SEQUENCE__REG;
        case _MATCH_KEYS:
            return should_spill ? _MATCH_KEYS__REG_SPILL : _MATCH_KEYS__REG;
        case _GET_ITER:
            return should_spill ? _GET_ITER__REG_SPILL : _GET_ITER__REG;
        case _GET_YIELD_FROM_ITER:
            return should_spill ? _GET_YIELD_FROM_ITER__REG_SPILL : _GET_YIELD_FROM_ITER__REG;
        case _FOR_ITER_TIER_TWO:
            return should_spill ? _FOR_ITER_TIER_TWO__REG_SPILL : _FOR_ITER_TIER_TWO__REG;
        case _ITER_CHECK_LIST:
            return should_spill ? _ITER_CHECK_LIST__REG_SPILL : _ITER_CHECK_LIST__REG;
        case _GUARD_NOT_EXHAUSTED_LIST:
            return should_spill ? _GUARD_NOT_EXHAUSTED_LIST__REG_SPILL : _GUARD_NOT_EXHAUSTED_LIST__REG;
        case _ITER_NEXT_LIST:
            return should_spill ? _ITER_NEXT_LIST__REG_SPILL : _ITER_NEXT_LIST__REG;
        case _ITER_CHECK_TUPLE:
            return should_spill ? _ITER_CHECK_TUPLE__REG_SPILL : _ITER_CHECK_TUPLE__REG;
        case _GUARD_NOT_EXHAUSTED_TUPLE:
            return should_spill ? _GUARD_NOT_EXHAUSTED_TUPLE__REG_SPILL : _GUARD_NOT_EXHAUSTED_TUPLE__REG;
        case _ITER_NEXT_TUPLE:
            return should_spill ? _ITER_NEXT_TUPLE__REG_SPILL : _ITER_NEXT_TUPLE__REG;
        case _ITER_CHECK_RANGE:
            return should_spill ? _ITER_CHECK_RANGE__REG_SPILL : _ITER_CHECK_RANGE__REG;
        case _GUARD_NOT_EXHAUSTED_RANGE:
            return should_spill ? _GUARD_NOT_EXHAUSTED_RANGE__REG_SPILL : _GUARD_NOT_EXHAUSTED_RANGE__REG;
        case _ITER_NEXT_RANGE:
            return should_spill ? _ITER_NEXT_RANGE__REG_SPILL : _ITER_NEXT_RANGE__REG;
        case _BEFORE_ASYNC_WITH:
            return should_spill ? _BEFORE_ASYNC_WITH__REG_SPILL : _BEFORE_ASYNC_WITH__REG;
        case _BEFORE_WITH:
            return should_spill ? _BEFORE_WITH__REG_SPILL : _BEFORE_WITH__REG;
        case _WITH_EXCEPT_START:
            return should_spill ? _WITH_EXCEPT_START__REG_SPILL : _WITH_EXCEPT_START__REG;
        case _PUSH_EXC_INFO:
            return should_spill ? _PUSH_EXC_INFO__REG_SPILL : _PUSH_EXC_INFO__REG;
        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT:
            return should_spill ? _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG_SPILL : _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT__REG;
        case _GUARD_KEYS_VERSION:
            return should_spill ? _GUARD_KEYS_VERSION__REG_SPILL : _GUARD_KEYS_VERSION__REG;
        case _LOAD_ATTR_METHOD_WITH_VALUES:
            return should_spill ? _LOAD_ATTR_METHOD_WITH_VALUES__REG_SPILL : _LOAD_ATTR_METHOD_WITH_VALUES__REG;
        case _LOAD_ATTR_METHOD_NO_DICT:
            return should_spill ? _LOAD_ATTR_METHOD_NO_DICT__REG_SPILL : _LOAD_ATTR_METHOD_NO_DICT__REG;
        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES:
            return should_spill ? _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG_SPILL : _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES__REG;
        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT:
            return should_spill ? _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG_SPILL : _LOAD_ATTR_NONDESCRIPTOR_NO_DICT__REG;
        case _CHECK_ATTR_METHOD_LAZY_DICT:
            return should_spill ? _CHECK_ATTR_METHOD_LAZY_DICT__REG_SPILL : _CHECK_ATTR_METHOD_LAZY_DICT__REG;
        case _LOAD_ATTR_METHOD_LAZY_DICT:
            return should_spill ? _LOAD_ATTR_METHOD_LAZY_DICT__REG_SPILL : _LOAD_ATTR_METHOD_LAZY_DICT__REG;
        case _CHECK_CALL_BOUND_METHOD_EXACT_ARGS:
            return should_spill ? _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL : _CHECK_CALL_BOUND_METHOD_EXACT_ARGS__REG;
        case _INIT_CALL_BOUND_METHOD_EXACT_ARGS:
            return should_spill ? _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG_SPILL : _INIT_CALL_BOUND_METHOD_EXACT_ARGS__REG;
        case _CHECK_FUNCTION_EXACT_ARGS:
            return should_spill ? _CHECK_FUNCTION_EXACT_ARGS__REG_SPILL : _CHECK_FUNCTION_EXACT_ARGS__REG;
        case _CHECK_STACK_SPACE:
            return should_spill ? _CHECK_STACK_SPACE__REG_SPILL : _CHECK_STACK_SPACE__REG;
        case _INIT_CALL_PY_EXACT_ARGS_0:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS_0__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS_0__REG;
        case _INIT_CALL_PY_EXACT_ARGS_1:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS_1__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS_1__REG;
        case _INIT_CALL_PY_EXACT_ARGS_2:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS_2__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS_2__REG;
        case _INIT_CALL_PY_EXACT_ARGS_3:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS_3__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS_3__REG;
        case _INIT_CALL_PY_EXACT_ARGS_4:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS_4__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS_4__REG;
        case _INIT_CALL_PY_EXACT_ARGS:
            return should_spill ? _INIT_CALL_PY_EXACT_ARGS__REG_SPILL : _INIT_CALL_PY_EXACT_ARGS__REG;
        case _PUSH_FRAME:
            return should_spill ? _PUSH_FRAME__REG_SPILL : _PUSH_FRAME__REG;
        case _CALL_TYPE_1:
            return should_spill ? _CALL_TYPE_1__REG_SPILL : _CALL_TYPE_1__REG;
        case _CALL_STR_1:
            return should_spill ? _CALL_STR_1__REG_SPILL : _CALL_STR_1__REG;
        case _CALL_TUPLE_1:
            return should_spill ? _CALL_TUPLE_1__REG_SPILL : _CALL_TUPLE_1__REG;
        case _EXIT_INIT_CHECK:
            return should_spill ? _EXIT_INIT_CHECK__REG_SPILL : _EXIT_INIT_CHECK__REG;
        case _CALL_BUILTIN_CLASS:
            return should_spill ? _CALL_BUILTIN_CLASS__REG_SPILL : _CALL_BUILTIN_CLASS__REG;
        case _CALL_BUILTIN_O:
            return should_spill ? _CALL_BUILTIN_O__REG_SPILL : _CALL_BUILTIN_O__REG;
        case _CALL_BUILTIN_FAST:
            return should_spill ? _CALL_BUILTIN_FAST__REG_SPILL : _CALL_BUILTIN_FAST__REG;
        case _CALL_BUILTIN_FAST_WITH_KEYWORDS:
            return should_spill ? _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG_SPILL : _CALL_BUILTIN_FAST_WITH_KEYWORDS__REG;
        case _CALL_LEN:
            return should_spill ? _CALL_LEN__REG_SPILL : _CALL_LEN__REG;
        case _CALL_ISINSTANCE:
            return should_spill ? _CALL_ISINSTANCE__REG_SPILL : _CALL_ISINSTANCE__REG;
        case _CALL_METHOD_DESCRIPTOR_O:
            return should_spill ? _CALL_METHOD_DESCRIPTOR_O__REG_SPILL : _CALL_METHOD_DESCRIPTOR_O__REG;
        case _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS:
            return should_spill ? _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG_SPILL : _CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS__REG;
        case _CALL_METHOD_DESCRIPTOR_NOARGS:
            return should_spill ? _CALL_METHOD_DESCRIPTOR_NOARGS__REG_SPILL : _CALL_METHOD_DESCRIPTOR_NOARGS__REG;
        case _CALL_METHOD_DESCRIPTOR_FAST:
            return should_spill ? _CALL_METHOD_DESCRIPTOR_FAST__REG_SPILL : _CALL_METHOD_DESCRIPTOR_FAST__REG;
        case _MAKE_FUNCTION:
            return should_spill ? _MAKE_FUNCTION__REG_SPILL : _MAKE_FUNCTION__REG;
        case _SET_FUNCTION_ATTRIBUTE:
            return should_spill ? _SET_FUNCTION_ATTRIBUTE__REG_SPILL : _SET_FUNCTION_ATTRIBUTE__REG;
        case _BUILD_SLICE:
            return should_spill ? _BUILD_SLICE__REG_SPILL : _BUILD_SLICE__REG;
        case _CONVERT_VALUE:
            return should_spill ? _CONVERT_VALUE__REG_SPILL : _CONVERT_VALUE__REG;
        case _FORMAT_SIMPLE:
            return should_spill ? _FORMAT_SIMPLE__REG_SPILL : _FORMAT_SIMPLE__REG;
        case _FORMAT_WITH_SPEC:
            return should_spill ? _FORMAT_WITH_SPEC__REG_SPILL : _FORMAT_WITH_SPEC__REG;
        case _COPY:
            return should_spill ? _COPY__REG_SPILL : _COPY__REG;
        case _BINARY_OP:
            return should_spill ? _BINARY_OP__REG_SPILL : _BINARY_OP__REG;
        case _SWAP:
            return should_spill ? _SWAP__REG_SPILL : _SWAP__REG;
        case _GUARD_IS_TRUE_POP:
            return should_spill ? _GUARD_IS_TRUE_POP__REG_SPILL : _GUARD_IS_TRUE_POP__REG;
        case _GUARD_IS_FALSE_POP:
            return should_spill ? _GUARD_IS_FALSE_POP__REG_SPILL : _GUARD_IS_FALSE_POP__REG;
        case _GUARD_IS_NONE_POP:
            return should_spill ? _GUARD_IS_NONE_POP__REG_SPILL : _GUARD_IS_NONE_POP__REG;
        case _GUARD_IS_NOT_NONE_POP:
            return should_spill ? _GUARD_IS_NOT_NONE_POP__REG_SPILL : _GUARD_IS_NOT_NONE_POP__REG;
        case _LOAD_CONST_INLINE:
            return should_spill ? _LOAD_CONST_INLINE__REG_SPILL : _LOAD_CONST_INLINE__REG;
        case _LOAD_CONST_INLINE_BORROW:
            return should_spill ? _LOAD_CONST_INLINE_BORROW__REG_SPILL : _LOAD_CONST_INLINE_BORROW__REG;
        case _POP_TOP_LOAD_CONST_INLINE_BORROW:
            return should_spill ? _POP_TOP_LOAD_CONST_INLINE_BORROW__REG_SPILL : _POP_TOP_LOAD_CONST_INLINE_BORROW__REG;
        case _LOAD_CONST_INLINE_WITH_NULL:
            return should_spill ? _LOAD_CONST_INLINE_WITH_NULL__REG_SPILL : _LOAD_CONST_INLINE_WITH_NULL__REG;
        case _LOAD_CONST_INLINE_BORROW_WITH_NULL:
            return should_spill ? _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG_SPILL : _LOAD_CONST_INLINE_BORROW_WITH_NULL__REG;
        case _INTERNAL_INCREMENT_OPT_COUNTER:
            return should_spill ? _INTERNAL_INCREMENT_OPT_COUNTER__REG_SPILL : _INTERNAL_INCREMENT_OPT_COUNTER__REG;
        case _REG_SPILL_0:
            return should_spill ? _REG_SPILL_0__REG_SPILL : _REG_SPILL_0__REG;
        case _REG_SPILL_0_1:
            return should_spill ? _REG_SPILL_0_1__REG_SPILL : _REG_SPILL_0_1__REG;
        case _REG_SPILL_0_1_2:
            return should_spill ? _REG_SPILL_0_1_2__REG_SPILL : _REG_SPILL_0_1_2__REG;
        default:
            return -1;
    }
}

#endif


#ifdef __cplusplus
}
#endif
#endif /* !Py_CORE_UOP_METADATA_H */
