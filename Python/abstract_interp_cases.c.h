// This file is generated by Tools/cases_generator/generate_cases.py
// from:
//   Python/bytecodes.c
// Do not edit!

        case _BINARY_OP_MULTIPLY_INT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }

        case _BINARY_OP_ADD_INT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }

        case _BINARY_OP_SUBTRACT_INT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }

        case _BINARY_OP_MULTIPLY_FLOAT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }

        case _BINARY_OP_ADD_FLOAT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }

        case _BINARY_OP_SUBTRACT_FLOAT: {
            _Py_UOpsSymbolicExpression *right;
            _Py_UOpsSymbolicExpression *left;
            right = (_Py_UOpsSymbolicExpression *)stack_pointer[-1];
            left = (_Py_UOpsSymbolicExpression *)stack_pointer[-2];
            STACK_SHRINK(1);
            _Py_UOpsSymbolicExpression *__sym_temp = _Py_UOpsSymbolicExpression_New(false, 2 , right, left);
            PEEK(-(-1)) = __sym_temp;
            break;
        }
