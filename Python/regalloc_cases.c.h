// This file is generated by Tools/cases_generator/tier2_regalloc_generator.py
// from:
//   Python/bytecodes.c
// Do not edit!

#ifdef TIER_ONE
    #error "This file is for Tier 2 only"
#endif
#define TIER_TWO 2

        case _NOP: {
            switch(curr_regs_in) {
                case 1:
                reged = _NOP___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _NOP___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _NOP___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _NOP___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _NOP___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _NOP___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_PERIODIC: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_PERIODIC___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_PERIODIC___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_PERIODIC___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_PERIODIC___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_PERIODIC___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_PERIODIC___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_PERIODIC_IF_NOT_YIELD_FROM: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_PERIODIC_IF_NOT_YIELD_FROM___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _QUICKEN_RESUME is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        /* _LOAD_BYTECODE is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _RESUME_CHECK: {
            switch(curr_regs_in) {
                case 1:
                reged = _RESUME_CHECK___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _RESUME_CHECK___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _RESUME_CHECK___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _RESUME_CHECK___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _RESUME_CHECK___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _RESUME_CHECK___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _MONITOR_RESUME is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _LOAD_FAST_CHECK: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_FAST_CHECK___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_FAST_CHECK___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_FAST_CHECK___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_FAST_CHECK___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_FAST_CHECK___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_FAST_CHECK___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_FAST: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_FAST___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_FAST___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_FAST___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_FAST___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_FAST___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_FAST___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_FAST_BORROW: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_FAST_BORROW___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_FAST_BORROW___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_FAST_BORROW___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_FAST_BORROW___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_FAST_BORROW___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_FAST_BORROW___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_FAST_AND_CLEAR: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_FAST_AND_CLEAR___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _LOAD_CONST is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _LOAD_CONST_MORTAL: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_CONST_MORTAL___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_CONST_MORTAL___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_CONST_MORTAL___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_CONST_MORTAL___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_CONST_MORTAL___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_CONST_MORTAL___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_CONST_IMMORTAL: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_CONST_IMMORTAL___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_CONST_IMMORTAL___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_CONST_IMMORTAL___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_CONST_IMMORTAL___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_CONST_IMMORTAL___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_CONST_IMMORTAL___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_SMALL_INT: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_SMALL_INT___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_SMALL_INT___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_SMALL_INT___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_SMALL_INT___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_SMALL_INT___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_SMALL_INT___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_FAST: {
            switch(curr_regs_in) {
                case 1:
                reged = _STORE_FAST___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _STORE_FAST___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _STORE_FAST___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _STORE_FAST___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _STORE_FAST___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _STORE_FAST___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _POP_TOP: {
            switch(curr_regs_in) {
                case 1:
                reged = _POP_TOP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _POP_TOP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _POP_TOP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _POP_TOP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _POP_TOP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _POP_TOP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _PUSH_NULL: {
            switch(curr_regs_in) {
                case 0:
                reged = _PUSH_NULL___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _PUSH_NULL___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _PUSH_NULL___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _PUSH_NULL___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _PUSH_NULL___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _PUSH_NULL___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _END_FOR: {
            switch(curr_regs_in) {
                case 1:
                reged = _END_FOR___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _END_FOR___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _END_FOR___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _END_FOR___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _END_FOR___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _END_FOR___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _END_SEND: {
            switch(curr_regs_in) {
                case 1:
                reged = _END_SEND___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _END_SEND___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _END_SEND___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _END_SEND___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _END_SEND___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _END_SEND___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _UNARY_NEGATIVE: {
            switch(curr_regs_in) {
                case 1:
                reged = _UNARY_NEGATIVE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _UNARY_NEGATIVE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _UNARY_NEGATIVE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _UNARY_NEGATIVE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _UNARY_NEGATIVE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _UNARY_NEGATIVE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _UNARY_NOT: {
            switch(curr_regs_in) {
                case 1:
                reged = _UNARY_NOT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _UNARY_NOT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _UNARY_NOT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _UNARY_NOT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _UNARY_NOT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _UNARY_NOT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL_BOOL: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL_BOOL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL_BOOL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL_BOOL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL_BOOL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL_BOOL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL_BOOL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL_INT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL_INT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL_INT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL_INT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL_INT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL_INT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_LIST: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_LIST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_LIST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_LIST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_LIST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_LIST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_LIST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_LIST: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_LIST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_LIST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_LIST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_LIST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_LIST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_LIST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_SLICE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_SLICE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_SLICE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_SLICE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_SLICE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_SLICE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_SLICE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL_LIST: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL_LIST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL_LIST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL_LIST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL_LIST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL_LIST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL_LIST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL_NONE: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL_NONE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL_NONE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL_NONE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL_NONE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL_NONE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL_NONE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_UNICODE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_UNICODE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_UNICODE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_UNICODE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_UNICODE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_UNICODE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_UNICODE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_UNICODE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_UNICODE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_UNICODE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_UNICODE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_UNICODE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_UNICODE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_UNICODE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TO_BOOL_STR: {
            switch(curr_regs_in) {
                case 1:
                reged = _TO_BOOL_STR___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TO_BOOL_STR___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TO_BOOL_STR___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TO_BOOL_STR___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TO_BOOL_STR___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TO_BOOL_STR___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _REPLACE_WITH_TRUE: {
            switch(curr_regs_in) {
                case 1:
                reged = _REPLACE_WITH_TRUE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _REPLACE_WITH_TRUE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _REPLACE_WITH_TRUE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _REPLACE_WITH_TRUE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _REPLACE_WITH_TRUE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _REPLACE_WITH_TRUE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _UNARY_INVERT: {
            switch(curr_regs_in) {
                case 1:
                reged = _UNARY_INVERT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _UNARY_INVERT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _UNARY_INVERT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _UNARY_INVERT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _UNARY_INVERT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _UNARY_INVERT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_INT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_INT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_INT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_INT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_INT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_INT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_INT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_INT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_INT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_INT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_INT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_INT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_MULTIPLY_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_MULTIPLY_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_ADD_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_ADD_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_ADD_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_ADD_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_ADD_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_ADD_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_ADD_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBTRACT_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBTRACT_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_FLOAT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_FLOAT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_FLOAT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_FLOAT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_FLOAT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_FLOAT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_FLOAT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_FLOAT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_FLOAT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_FLOAT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_FLOAT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_FLOAT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_MULTIPLY_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_MULTIPLY_FLOAT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_ADD_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_ADD_FLOAT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBTRACT_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBTRACT_FLOAT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_ADD_UNICODE: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_ADD_UNICODE___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_INPLACE_ADD_UNICODE: {
            switch(curr_regs_in) {
                case 2:
                reged = _BINARY_OP_INPLACE_ADD_UNICODE___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _BINARY_OP_INPLACE_ADD_UNICODE___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _BINARY_OP_INPLACE_ADD_UNICODE___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _BINARY_OP_INPLACE_ADD_UNICODE___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _BINARY_OP_INPLACE_ADD_UNICODE___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_BINARY_OP_EXTEND: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_BINARY_OP_EXTEND___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_EXTEND: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_EXTEND___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_EXTEND___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_EXTEND___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_EXTEND___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_EXTEND___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_EXTEND___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_SLICE: {
            switch(curr_regs_in) {
                case 2:
                reged = _BINARY_SLICE___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _BINARY_SLICE___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _BINARY_SLICE___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _BINARY_SLICE___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _BINARY_SLICE___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_SLICE: {
            switch(curr_regs_in) {
                case 4:
                reged = _STORE_SLICE___CACHED_4in_0out;
                curr_regs_in = 0;
                break;
                case 5:
                reged = _STORE_SLICE___CACHED_5in_1out;
                curr_regs_in = 1;
                break;
                case 6:
                reged = _STORE_SLICE___CACHED_6in_2out;
                curr_regs_in = 2;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_LIST_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBSCR_LIST_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_LIST_SLICE: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBSCR_LIST_SLICE___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_STR_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBSCR_STR_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_TUPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_TUPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_TUPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_TUPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_TUPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_TUPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_TUPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_TUPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_TUPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_TUPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_TUPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_TUPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_TUPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_TUPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_TUPLE_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBSCR_TUPLE_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP_SUBSCR_DICT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP_SUBSCR_CHECK_FUNC: {
            switch(curr_regs_in) {
                case 0:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _BINARY_OP_SUBSCR_CHECK_FUNC___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_SUBSCR: {
            switch(curr_regs_in) {
                case 3:
                reged = _STORE_SUBSCR___CACHED_3in_0out;
                curr_regs_in = 0;
                break;
                case 4:
                reged = _STORE_SUBSCR___CACHED_4in_1out;
                curr_regs_in = 1;
                break;
                case 5:
                reged = _STORE_SUBSCR___CACHED_5in_2out;
                curr_regs_in = 2;
                break;
                case 6:
                reged = _STORE_SUBSCR___CACHED_6in_3out;
                curr_regs_in = 3;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_SUBSCR_LIST_INT: {
            switch(curr_regs_in) {
                case 3:
                reged = _STORE_SUBSCR_LIST_INT___CACHED_3in_0out;
                curr_regs_in = 0;
                break;
                case 4:
                reged = _STORE_SUBSCR_LIST_INT___CACHED_4in_1out;
                curr_regs_in = 1;
                break;
                case 5:
                reged = _STORE_SUBSCR_LIST_INT___CACHED_5in_2out;
                curr_regs_in = 2;
                break;
                case 6:
                reged = _STORE_SUBSCR_LIST_INT___CACHED_6in_3out;
                curr_regs_in = 3;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_SUBSCR_DICT: {
            switch(curr_regs_in) {
                case 3:
                reged = _STORE_SUBSCR_DICT___CACHED_3in_0out;
                curr_regs_in = 0;
                break;
                case 4:
                reged = _STORE_SUBSCR_DICT___CACHED_4in_1out;
                curr_regs_in = 1;
                break;
                case 5:
                reged = _STORE_SUBSCR_DICT___CACHED_5in_2out;
                curr_regs_in = 2;
                break;
                case 6:
                reged = _STORE_SUBSCR_DICT___CACHED_6in_3out;
                curr_regs_in = 3;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_SUBSCR: {
            switch(curr_regs_in) {
                case 2:
                reged = _DELETE_SUBSCR___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _DELETE_SUBSCR___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _DELETE_SUBSCR___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _DELETE_SUBSCR___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _DELETE_SUBSCR___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_INTRINSIC_1: {
            switch(curr_regs_in) {
                case 1:
                reged = _CALL_INTRINSIC_1___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CALL_INTRINSIC_1___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CALL_INTRINSIC_1___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CALL_INTRINSIC_1___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CALL_INTRINSIC_1___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CALL_INTRINSIC_1___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_INTRINSIC_2: {
            switch(curr_regs_in) {
                case 1:
                reged = _CALL_INTRINSIC_2___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _CALL_INTRINSIC_2___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _CALL_INTRINSIC_2___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _CALL_INTRINSIC_2___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _CALL_INTRINSIC_2___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _CALL_INTRINSIC_2___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _RETURN_VALUE: {
            switch(curr_regs_in) {
                case 1:
                reged = _RETURN_VALUE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _RETURN_VALUE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _RETURN_VALUE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _RETURN_VALUE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _RETURN_VALUE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _RETURN_VALUE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_AITER: {
            switch(curr_regs_in) {
                case 1:
                reged = _GET_AITER___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GET_AITER___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GET_AITER___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GET_AITER___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GET_AITER___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GET_AITER___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_ANEXT: {
            switch(curr_regs_in) {
                case 0:
                reged = _GET_ANEXT___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _GET_ANEXT___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _GET_ANEXT___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _GET_ANEXT___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _GET_ANEXT___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _GET_ANEXT___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_AWAITABLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GET_AWAITABLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GET_AWAITABLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GET_AWAITABLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GET_AWAITABLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GET_AWAITABLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GET_AWAITABLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _SEND is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _YIELD_VALUE: {
            switch(curr_regs_in) {
                case 1:
                reged = _YIELD_VALUE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _YIELD_VALUE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _YIELD_VALUE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _YIELD_VALUE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _YIELD_VALUE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _YIELD_VALUE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _POP_EXCEPT: {
            switch(curr_regs_in) {
                case 1:
                reged = _POP_EXCEPT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _POP_EXCEPT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _POP_EXCEPT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _POP_EXCEPT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _POP_EXCEPT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _POP_EXCEPT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_COMMON_CONSTANT: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_COMMON_CONSTANT___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_COMMON_CONSTANT___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_COMMON_CONSTANT___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_COMMON_CONSTANT___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_COMMON_CONSTANT___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_COMMON_CONSTANT___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_BUILD_CLASS: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_BUILD_CLASS___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_BUILD_CLASS___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_BUILD_CLASS___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_BUILD_CLASS___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_BUILD_CLASS___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_BUILD_CLASS___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_NAME: {
            switch(curr_regs_in) {
                case 1:
                reged = _STORE_NAME___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _STORE_NAME___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _STORE_NAME___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _STORE_NAME___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _STORE_NAME___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _STORE_NAME___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_NAME: {
            switch(curr_regs_in) {
                case 1:
                reged = _DELETE_NAME___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _DELETE_NAME___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _DELETE_NAME___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _DELETE_NAME___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _DELETE_NAME___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _DELETE_NAME___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _UNPACK_SEQUENCE_TWO_TUPLE: {
            switch(curr_regs_in) {
                case 0:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _UNPACK_SEQUENCE_TWO_TUPLE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_ATTR: {
            switch(curr_regs_in) {
                case 2:
                reged = _STORE_ATTR___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _STORE_ATTR___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _STORE_ATTR___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _STORE_ATTR___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _STORE_ATTR___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_ATTR: {
            switch(curr_regs_in) {
                case 1:
                reged = _DELETE_ATTR___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _DELETE_ATTR___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _DELETE_ATTR___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _DELETE_ATTR___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _DELETE_ATTR___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _DELETE_ATTR___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_GLOBAL: {
            switch(curr_regs_in) {
                case 1:
                reged = _STORE_GLOBAL___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _STORE_GLOBAL___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _STORE_GLOBAL___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _STORE_GLOBAL___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _STORE_GLOBAL___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _STORE_GLOBAL___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_GLOBAL: {
            switch(curr_regs_in) {
                case 1:
                reged = _DELETE_GLOBAL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _DELETE_GLOBAL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _DELETE_GLOBAL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _DELETE_GLOBAL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _DELETE_GLOBAL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _DELETE_GLOBAL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_LOCALS: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_LOCALS___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_LOCALS___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_LOCALS___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_LOCALS___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_LOCALS___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_LOCALS___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _LOAD_FROM_DICT_OR_GLOBALS is not a viable micro-op for tier 2 because it has both popping and not-popping errors */

        case _LOAD_NAME: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_NAME___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_NAME___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_NAME___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_NAME___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_NAME___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_NAME___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_GLOBALS_VERSION: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_GLOBALS_VERSION___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_GLOBALS_VERSION___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_GLOBALS_VERSION___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_GLOBALS_VERSION___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_GLOBALS_VERSION___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_GLOBALS_VERSION___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_GLOBAL_MODULE: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_GLOBAL_MODULE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_GLOBAL_MODULE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_GLOBAL_MODULE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_GLOBAL_MODULE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_GLOBAL_MODULE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_GLOBAL_MODULE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_GLOBAL_BUILTINS: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_GLOBAL_BUILTINS___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_FAST: {
            switch(curr_regs_in) {
                case 1:
                reged = _DELETE_FAST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _DELETE_FAST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _DELETE_FAST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _DELETE_FAST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _DELETE_FAST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _DELETE_FAST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MAKE_CELL: {
            switch(curr_regs_in) {
                case 1:
                reged = _MAKE_CELL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _MAKE_CELL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _MAKE_CELL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _MAKE_CELL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _MAKE_CELL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _MAKE_CELL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DELETE_DEREF: {
            switch(curr_regs_in) {
                case 1:
                reged = _DELETE_DEREF___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _DELETE_DEREF___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _DELETE_DEREF___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _DELETE_DEREF___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _DELETE_DEREF___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _DELETE_DEREF___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_FROM_DICT_OR_DEREF: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_FROM_DICT_OR_DEREF___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_DEREF: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_DEREF___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_DEREF___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_DEREF___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_DEREF___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_DEREF___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_DEREF___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_DEREF: {
            switch(curr_regs_in) {
                case 1:
                reged = _STORE_DEREF___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _STORE_DEREF___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _STORE_DEREF___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _STORE_DEREF___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _STORE_DEREF___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _STORE_DEREF___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _COPY_FREE_VARS: {
            switch(curr_regs_in) {
                case 1:
                reged = _COPY_FREE_VARS___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _COPY_FREE_VARS___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _COPY_FREE_VARS___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _COPY_FREE_VARS___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _COPY_FREE_VARS___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _COPY_FREE_VARS___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BUILD_TEMPLATE: {
            switch(curr_regs_in) {
                case 1:
                reged = _BUILD_TEMPLATE___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BUILD_TEMPLATE___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BUILD_TEMPLATE___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BUILD_TEMPLATE___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BUILD_TEMPLATE___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BUILD_TEMPLATE___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _SETUP_ANNOTATIONS: {
            switch(curr_regs_in) {
                case 1:
                reged = _SETUP_ANNOTATIONS___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _SETUP_ANNOTATIONS___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _SETUP_ANNOTATIONS___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _SETUP_ANNOTATIONS___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _SETUP_ANNOTATIONS___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _SETUP_ANNOTATIONS___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_SUPER_ATTR_ATTR: {
            switch(curr_regs_in) {
                case 2:
                reged = _LOAD_SUPER_ATTR_ATTR___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _LOAD_SUPER_ATTR_ATTR___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _LOAD_SUPER_ATTR_ATTR___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _LOAD_SUPER_ATTR_ATTR___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _LOAD_SUPER_ATTR_ATTR___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_SUPER_ATTR_METHOD: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _LOAD_SUPER_ATTR_METHOD___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TYPE_VERSION: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TYPE_VERSION___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TYPE_VERSION___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TYPE_VERSION___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TYPE_VERSION___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TYPE_VERSION___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TYPE_VERSION___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TYPE_VERSION_AND_LOCK: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TYPE_VERSION_AND_LOCK___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_MANAGED_OBJECT_HAS_VALUES: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_MANAGED_OBJECT_HAS_VALUES___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_INSTANCE_VALUE: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_INSTANCE_VALUE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_MODULE: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_MODULE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_MODULE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_MODULE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_MODULE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_MODULE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_MODULE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_WITH_HINT: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_WITH_HINT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_SLOT: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_SLOT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_SLOT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_SLOT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_SLOT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_SLOT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_SLOT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_ATTR_CLASS: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_ATTR_CLASS___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_ATTR_CLASS___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_ATTR_CLASS___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_ATTR_CLASS___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_ATTR_CLASS___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_ATTR_CLASS___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_CLASS: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_CLASS___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_CLASS___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_CLASS___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_CLASS___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_CLASS___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_CLASS___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN is not a viable micro-op for tier 2 because it has too many cache entries */

        case _GUARD_DORV_NO_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_DORV_NO_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_DORV_NO_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_DORV_NO_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_DORV_NO_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_DORV_NO_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_DORV_NO_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_ATTR_INSTANCE_VALUE: {
            switch(curr_regs_in) {
                case 2:
                reged = _STORE_ATTR_INSTANCE_VALUE___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _STORE_ATTR_INSTANCE_VALUE___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _STORE_ATTR_INSTANCE_VALUE___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _STORE_ATTR_INSTANCE_VALUE___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _STORE_ATTR_INSTANCE_VALUE___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_ATTR_WITH_HINT: {
            switch(curr_regs_in) {
                case 2:
                reged = _STORE_ATTR_WITH_HINT___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _STORE_ATTR_WITH_HINT___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _STORE_ATTR_WITH_HINT___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _STORE_ATTR_WITH_HINT___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _STORE_ATTR_WITH_HINT___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _STORE_ATTR_SLOT: {
            switch(curr_regs_in) {
                case 2:
                reged = _STORE_ATTR_SLOT___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _STORE_ATTR_SLOT___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _STORE_ATTR_SLOT___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _STORE_ATTR_SLOT___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _STORE_ATTR_SLOT___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _COMPARE_OP: {
            switch(curr_regs_in) {
                case 1:
                reged = _COMPARE_OP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _COMPARE_OP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _COMPARE_OP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _COMPARE_OP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _COMPARE_OP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _COMPARE_OP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _COMPARE_OP_FLOAT: {
            switch(curr_regs_in) {
                case 1:
                reged = _COMPARE_OP_FLOAT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _COMPARE_OP_FLOAT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _COMPARE_OP_FLOAT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _COMPARE_OP_FLOAT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _COMPARE_OP_FLOAT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _COMPARE_OP_FLOAT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _COMPARE_OP_INT: {
            switch(curr_regs_in) {
                case 1:
                reged = _COMPARE_OP_INT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _COMPARE_OP_INT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _COMPARE_OP_INT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _COMPARE_OP_INT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _COMPARE_OP_INT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _COMPARE_OP_INT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _COMPARE_OP_STR: {
            switch(curr_regs_in) {
                case 1:
                reged = _COMPARE_OP_STR___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _COMPARE_OP_STR___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _COMPARE_OP_STR___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _COMPARE_OP_STR___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _COMPARE_OP_STR___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _COMPARE_OP_STR___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _IS_OP: {
            switch(curr_regs_in) {
                case 1:
                reged = _IS_OP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _IS_OP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _IS_OP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _IS_OP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _IS_OP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _IS_OP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CONTAINS_OP: {
            switch(curr_regs_in) {
                case 1:
                reged = _CONTAINS_OP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _CONTAINS_OP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _CONTAINS_OP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _CONTAINS_OP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _CONTAINS_OP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _CONTAINS_OP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_TOS_ANY_SET: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_TOS_ANY_SET___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_TOS_ANY_SET___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_TOS_ANY_SET___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_TOS_ANY_SET___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_TOS_ANY_SET___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_TOS_ANY_SET___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CONTAINS_OP_SET: {
            switch(curr_regs_in) {
                case 1:
                reged = _CONTAINS_OP_SET___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _CONTAINS_OP_SET___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _CONTAINS_OP_SET___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _CONTAINS_OP_SET___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _CONTAINS_OP_SET___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _CONTAINS_OP_SET___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CONTAINS_OP_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _CONTAINS_OP_DICT___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _CONTAINS_OP_DICT___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _CONTAINS_OP_DICT___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _CONTAINS_OP_DICT___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _CONTAINS_OP_DICT___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _CONTAINS_OP_DICT___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_EG_MATCH: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_EG_MATCH___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_EG_MATCH___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_EG_MATCH___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_EG_MATCH___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_EG_MATCH___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_EG_MATCH___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_EXC_MATCH: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_EXC_MATCH___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_EXC_MATCH___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_EXC_MATCH___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_EXC_MATCH___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_EXC_MATCH___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_EXC_MATCH___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _IMPORT_NAME: {
            switch(curr_regs_in) {
                case 1:
                reged = _IMPORT_NAME___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _IMPORT_NAME___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _IMPORT_NAME___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _IMPORT_NAME___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _IMPORT_NAME___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _IMPORT_NAME___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _IMPORT_FROM: {
            switch(curr_regs_in) {
                case 0:
                reged = _IMPORT_FROM___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _IMPORT_FROM___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _IMPORT_FROM___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _IMPORT_FROM___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _IMPORT_FROM___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _IMPORT_FROM___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _POP_JUMP_IF_FALSE is not a viable micro-op for tier 2 because it is replaced */

        /* _POP_JUMP_IF_TRUE is not a viable micro-op for tier 2 because it is replaced */

        case _IS_NONE: {
            switch(curr_regs_in) {
                case 1:
                reged = _IS_NONE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _IS_NONE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _IS_NONE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _IS_NONE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _IS_NONE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _IS_NONE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_LEN: {
            switch(curr_regs_in) {
                case 0:
                reged = _GET_LEN___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _GET_LEN___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _GET_LEN___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _GET_LEN___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _GET_LEN___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _GET_LEN___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MATCH_CLASS: {
            switch(curr_regs_in) {
                case 2:
                reged = _MATCH_CLASS___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _MATCH_CLASS___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _MATCH_CLASS___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _MATCH_CLASS___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _MATCH_CLASS___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MATCH_MAPPING: {
            switch(curr_regs_in) {
                case 0:
                reged = _MATCH_MAPPING___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _MATCH_MAPPING___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _MATCH_MAPPING___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _MATCH_MAPPING___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _MATCH_MAPPING___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _MATCH_MAPPING___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MATCH_SEQUENCE: {
            switch(curr_regs_in) {
                case 0:
                reged = _MATCH_SEQUENCE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _MATCH_SEQUENCE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _MATCH_SEQUENCE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _MATCH_SEQUENCE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _MATCH_SEQUENCE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _MATCH_SEQUENCE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MATCH_KEYS: {
            switch(curr_regs_in) {
                case 0:
                reged = _MATCH_KEYS___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _MATCH_KEYS___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _MATCH_KEYS___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _MATCH_KEYS___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _MATCH_KEYS___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _MATCH_KEYS___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_ITER: {
            switch(curr_regs_in) {
                case 1:
                reged = _GET_ITER___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GET_ITER___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GET_ITER___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GET_ITER___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GET_ITER___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GET_ITER___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GET_YIELD_FROM_ITER: {
            switch(curr_regs_in) {
                case 1:
                reged = _GET_YIELD_FROM_ITER___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GET_YIELD_FROM_ITER___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GET_YIELD_FROM_ITER___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GET_YIELD_FROM_ITER___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GET_YIELD_FROM_ITER___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GET_YIELD_FROM_ITER___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _FOR_ITER is not a viable micro-op for tier 2 because it is replaced */

        case _FOR_ITER_TIER_TWO: {
            switch(curr_regs_in) {
                case 0:
                reged = _FOR_ITER_TIER_TWO___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _FOR_ITER_TIER_TWO___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _FOR_ITER_TIER_TWO___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _FOR_ITER_TIER_TWO___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _FOR_ITER_TIER_TWO___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _FOR_ITER_TIER_TWO___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _INSTRUMENTED_FOR_ITER is not a viable micro-op for tier 2 because it is instrumented */

        case _ITER_CHECK_LIST: {
            switch(curr_regs_in) {
                case 1:
                reged = _ITER_CHECK_LIST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _ITER_CHECK_LIST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _ITER_CHECK_LIST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _ITER_CHECK_LIST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _ITER_CHECK_LIST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _ITER_CHECK_LIST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _ITER_JUMP_LIST is not a viable micro-op for tier 2 because it is replaced */

        case _GUARD_NOT_EXHAUSTED_LIST: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOT_EXHAUSTED_LIST___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _ITER_NEXT_LIST is not a viable micro-op for tier 2 because it is replaced */

        case _ITER_NEXT_LIST_TIER_TWO: {
            switch(curr_regs_in) {
                case 0:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _ITER_NEXT_LIST_TIER_TWO___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _ITER_CHECK_TUPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _ITER_CHECK_TUPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _ITER_CHECK_TUPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _ITER_CHECK_TUPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _ITER_CHECK_TUPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _ITER_CHECK_TUPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _ITER_CHECK_TUPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _ITER_JUMP_TUPLE is not a viable micro-op for tier 2 because it is replaced */

        case _GUARD_NOT_EXHAUSTED_TUPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOT_EXHAUSTED_TUPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _ITER_NEXT_TUPLE: {
            switch(curr_regs_in) {
                case 0:
                reged = _ITER_NEXT_TUPLE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _ITER_NEXT_TUPLE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _ITER_NEXT_TUPLE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _ITER_NEXT_TUPLE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _ITER_NEXT_TUPLE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _ITER_NEXT_TUPLE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _ITER_CHECK_RANGE: {
            switch(curr_regs_in) {
                case 1:
                reged = _ITER_CHECK_RANGE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _ITER_CHECK_RANGE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _ITER_CHECK_RANGE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _ITER_CHECK_RANGE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _ITER_CHECK_RANGE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _ITER_CHECK_RANGE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _ITER_JUMP_RANGE is not a viable micro-op for tier 2 because it is replaced */

        case _GUARD_NOT_EXHAUSTED_RANGE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOT_EXHAUSTED_RANGE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _ITER_NEXT_RANGE: {
            switch(curr_regs_in) {
                case 0:
                reged = _ITER_NEXT_RANGE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _ITER_NEXT_RANGE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _ITER_NEXT_RANGE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _ITER_NEXT_RANGE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _ITER_NEXT_RANGE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _ITER_NEXT_RANGE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _WITH_EXCEPT_START: {
            switch(curr_regs_in) {
                case 0:
                reged = _WITH_EXCEPT_START___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _WITH_EXCEPT_START___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _WITH_EXCEPT_START___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _WITH_EXCEPT_START___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _WITH_EXCEPT_START___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _WITH_EXCEPT_START___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _PUSH_EXC_INFO: {
            switch(curr_regs_in) {
                case 0:
                reged = _PUSH_EXC_INFO___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _PUSH_EXC_INFO___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _PUSH_EXC_INFO___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _PUSH_EXC_INFO___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _PUSH_EXC_INFO___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _PUSH_EXC_INFO___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_DORV_VALUES_INST_ATTR_FROM_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_KEYS_VERSION: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_KEYS_VERSION___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_KEYS_VERSION___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_KEYS_VERSION___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_KEYS_VERSION___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_KEYS_VERSION___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_KEYS_VERSION___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_METHOD_WITH_VALUES: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_ATTR_METHOD_WITH_VALUES___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_METHOD_NO_DICT: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_ATTR_METHOD_NO_DICT___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_NONDESCRIPTOR_NO_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _LOAD_ATTR_NONDESCRIPTOR_NO_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_ATTR_METHOD_LAZY_DICT: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_ATTR_METHOD_LAZY_DICT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_ATTR_METHOD_LAZY_DICT: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_ATTR_METHOD_LAZY_DICT___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _DO_CALL is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        /* _MONITOR_CALL is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _CHECK_FUNCTION_VERSION_INLINE: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_FUNCTION_VERSION_INLINE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_PEP_523: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_PEP_523___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_PEP_523___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_PEP_523___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_PEP_523___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_PEP_523___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_PEP_523___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_RECURSION_REMAINING: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_RECURSION_REMAINING___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_RECURSION_REMAINING___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_RECURSION_REMAINING___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_RECURSION_REMAINING___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_RECURSION_REMAINING___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_RECURSION_REMAINING___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_NOS_NULL: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_NOS_NULL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_NOS_NULL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_NOS_NULL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_NOS_NULL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_NOS_NULL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_NOS_NULL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_THIRD_NULL: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_THIRD_NULL___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_THIRD_NULL___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_THIRD_NULL___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_THIRD_NULL___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_THIRD_NULL___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_THIRD_NULL___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_CALLABLE_TYPE_1: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_CALLABLE_TYPE_1___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_TYPE_1: {
            switch(curr_regs_in) {
                case 2:
                reged = _CALL_TYPE_1___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _CALL_TYPE_1___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _CALL_TYPE_1___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _CALL_TYPE_1___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _CALL_TYPE_1___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_CALLABLE_STR_1: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_CALLABLE_STR_1___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_CALLABLE_STR_1___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_CALLABLE_STR_1___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_CALLABLE_STR_1___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_CALLABLE_STR_1___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_CALLABLE_STR_1___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_STR_1: {
            switch(curr_regs_in) {
                case 2:
                reged = _CALL_STR_1___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _CALL_STR_1___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _CALL_STR_1___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _CALL_STR_1___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _CALL_STR_1___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_CALLABLE_TUPLE_1: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_CALLABLE_TUPLE_1___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_TUPLE_1: {
            switch(curr_regs_in) {
                case 2:
                reged = _CALL_TUPLE_1___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _CALL_TUPLE_1___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _CALL_TUPLE_1___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _CALL_TUPLE_1___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _CALL_TUPLE_1___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _EXIT_INIT_CHECK: {
            switch(curr_regs_in) {
                case 1:
                reged = _EXIT_INIT_CHECK___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _EXIT_INIT_CHECK___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _EXIT_INIT_CHECK___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _EXIT_INIT_CHECK___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _EXIT_INIT_CHECK___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _EXIT_INIT_CHECK___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_CALLABLE_LEN: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_CALLABLE_LEN___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_CALLABLE_LEN___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_CALLABLE_LEN___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_CALLABLE_LEN___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_CALLABLE_LEN___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_CALLABLE_LEN___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_LEN: {
            switch(curr_regs_in) {
                case 2:
                reged = _CALL_LEN___CACHED_2in_0out;
                curr_regs_in = 0;
                break;
                case 3:
                reged = _CALL_LEN___CACHED_3in_1out;
                curr_regs_in = 1;
                break;
                case 4:
                reged = _CALL_LEN___CACHED_4in_2out;
                curr_regs_in = 2;
                break;
                case 5:
                reged = _CALL_LEN___CACHED_5in_3out;
                curr_regs_in = 3;
                break;
                case 6:
                reged = _CALL_LEN___CACHED_6in_4out;
                curr_regs_in = 4;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_CALLABLE_ISINSTANCE: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _GUARD_CALLABLE_ISINSTANCE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_ISINSTANCE: {
            switch(curr_regs_in) {
                case 3:
                reged = _CALL_ISINSTANCE___CACHED_3in_0out;
                curr_regs_in = 0;
                break;
                case 4:
                reged = _CALL_ISINSTANCE___CACHED_4in_1out;
                curr_regs_in = 1;
                break;
                case 5:
                reged = _CALL_ISINSTANCE___CACHED_5in_2out;
                curr_regs_in = 2;
                break;
                case 6:
                reged = _CALL_ISINSTANCE___CACHED_6in_3out;
                curr_regs_in = 3;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CALL_LIST_APPEND: {
            switch(curr_regs_in) {
                case 3:
                reged = _CALL_LIST_APPEND___CACHED_3in_0out;
                curr_regs_in = 0;
                break;
                case 4:
                reged = _CALL_LIST_APPEND___CACHED_4in_1out;
                curr_regs_in = 1;
                break;
                case 5:
                reged = _CALL_LIST_APPEND___CACHED_5in_2out;
                curr_regs_in = 2;
                break;
                case 6:
                reged = _CALL_LIST_APPEND___CACHED_6in_3out;
                curr_regs_in = 3;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _MONITOR_CALL_KW is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        /* _DO_CALL_KW is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _MAKE_CALLARGS_A_TUPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _MAKE_CALLARGS_A_TUPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _DO_CALL_FUNCTION_EX is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        case _MAKE_FUNCTION: {
            switch(curr_regs_in) {
                case 1:
                reged = _MAKE_FUNCTION___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _MAKE_FUNCTION___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _MAKE_FUNCTION___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _MAKE_FUNCTION___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _MAKE_FUNCTION___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _MAKE_FUNCTION___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _SET_FUNCTION_ATTRIBUTE: {
            switch(curr_regs_in) {
                case 1:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _SET_FUNCTION_ATTRIBUTE___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _RETURN_GENERATOR: {
            switch(curr_regs_in) {
                case 0:
                reged = _RETURN_GENERATOR___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _RETURN_GENERATOR___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _RETURN_GENERATOR___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _RETURN_GENERATOR___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _RETURN_GENERATOR___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _RETURN_GENERATOR___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CONVERT_VALUE: {
            switch(curr_regs_in) {
                case 1:
                reged = _CONVERT_VALUE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CONVERT_VALUE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CONVERT_VALUE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CONVERT_VALUE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CONVERT_VALUE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CONVERT_VALUE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _FORMAT_SIMPLE: {
            switch(curr_regs_in) {
                case 1:
                reged = _FORMAT_SIMPLE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _FORMAT_SIMPLE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _FORMAT_SIMPLE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _FORMAT_SIMPLE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _FORMAT_SIMPLE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _FORMAT_SIMPLE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _FORMAT_WITH_SPEC: {
            switch(curr_regs_in) {
                case 1:
                reged = _FORMAT_WITH_SPEC___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _FORMAT_WITH_SPEC___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _FORMAT_WITH_SPEC___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _FORMAT_WITH_SPEC___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _FORMAT_WITH_SPEC___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _FORMAT_WITH_SPEC___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _BINARY_OP: {
            switch(curr_regs_in) {
                case 1:
                reged = _BINARY_OP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _BINARY_OP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _BINARY_OP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _BINARY_OP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _BINARY_OP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _BINARY_OP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        /* _INSTRUMENTED_LINE is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_INSTRUCTION is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_JUMP_FORWARD is not a viable micro-op for tier 2 because it is instrumented */

        /* _MONITOR_JUMP_BACKWARD is not a viable micro-op for tier 2 because it uses the 'this_instr' variable */

        /* _INSTRUMENTED_NOT_TAKEN is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_POP_JUMP_IF_TRUE is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_POP_JUMP_IF_FALSE is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_POP_JUMP_IF_NONE is not a viable micro-op for tier 2 because it is instrumented */

        /* _INSTRUMENTED_POP_JUMP_IF_NOT_NONE is not a viable micro-op for tier 2 because it is instrumented */

        case _GUARD_IS_TRUE_POP: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_IS_TRUE_POP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _GUARD_IS_TRUE_POP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _GUARD_IS_TRUE_POP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _GUARD_IS_TRUE_POP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _GUARD_IS_TRUE_POP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _GUARD_IS_TRUE_POP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_IS_FALSE_POP: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_IS_FALSE_POP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _GUARD_IS_FALSE_POP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _GUARD_IS_FALSE_POP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _GUARD_IS_FALSE_POP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _GUARD_IS_FALSE_POP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _GUARD_IS_FALSE_POP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_IS_NONE_POP: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_IS_NONE_POP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _GUARD_IS_NONE_POP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _GUARD_IS_NONE_POP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _GUARD_IS_NONE_POP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _GUARD_IS_NONE_POP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _GUARD_IS_NONE_POP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _GUARD_IS_NOT_NONE_POP: {
            switch(curr_regs_in) {
                case 1:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _GUARD_IS_NOT_NONE_POP___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _JUMP_TO_TOP: {
            switch(curr_regs_in) {
                case 1:
                reged = _JUMP_TO_TOP___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _JUMP_TO_TOP___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _JUMP_TO_TOP___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _JUMP_TO_TOP___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _JUMP_TO_TOP___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _JUMP_TO_TOP___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _SET_IP: {
            switch(curr_regs_in) {
                case 1:
                reged = _SET_IP___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _SET_IP___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _SET_IP___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _SET_IP___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _SET_IP___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _SET_IP___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_STACK_SPACE_OPERAND: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_STACK_SPACE_OPERAND___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _SAVE_RETURN_OFFSET: {
            switch(curr_regs_in) {
                case 1:
                reged = _SAVE_RETURN_OFFSET___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _SAVE_RETURN_OFFSET___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _SAVE_RETURN_OFFSET___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _SAVE_RETURN_OFFSET___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _SAVE_RETURN_OFFSET___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _SAVE_RETURN_OFFSET___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _EXIT_TRACE: {
            switch(curr_regs_in) {
                case 1:
                reged = _EXIT_TRACE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _EXIT_TRACE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _EXIT_TRACE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _EXIT_TRACE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _EXIT_TRACE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _EXIT_TRACE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_VALIDITY: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_VALIDITY___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_VALIDITY___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_VALIDITY___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_VALIDITY___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_VALIDITY___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_VALIDITY___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_CONST_INLINE: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_CONST_INLINE___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_CONST_INLINE___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_CONST_INLINE___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_CONST_INLINE___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_CONST_INLINE___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_CONST_INLINE___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _POP_TOP_LOAD_CONST_INLINE: {
            switch(curr_regs_in) {
                case 1:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _POP_TOP_LOAD_CONST_INLINE___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _LOAD_CONST_INLINE_BORROW: {
            switch(curr_regs_in) {
                case 0:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_0in_1out;
                curr_regs_in = 1;
                break;
                case 1:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_1in_2out;
                curr_regs_in = 2;
                break;
                case 2:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_2in_3out;
                curr_regs_in = 3;
                break;
                case 3:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_3in_4out;
                curr_regs_in = 4;
                break;
                case 4:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_4in_5out;
                curr_regs_in = 5;
                break;
                case 5:
                reged = _LOAD_CONST_INLINE_BORROW___CACHED_5in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _POP_TOP_LOAD_CONST_INLINE_BORROW: {
            switch(curr_regs_in) {
                case 1:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _POP_TOP_LOAD_CONST_INLINE_BORROW___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _POP_TWO_LOAD_CONST_INLINE_BORROW: {
            switch(curr_regs_in) {
                case 1:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_1in_0out;
                curr_regs_in = 0;
                break;
                case 2:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_2in_1out;
                curr_regs_in = 1;
                break;
                case 3:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_3in_2out;
                curr_regs_in = 2;
                break;
                case 4:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_4in_3out;
                curr_regs_in = 3;
                break;
                case 5:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_5in_4out;
                curr_regs_in = 4;
                break;
                case 6:
                reged = _POP_TWO_LOAD_CONST_INLINE_BORROW___CACHED_6in_5out;
                curr_regs_in = 5;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _CHECK_FUNCTION: {
            switch(curr_regs_in) {
                case 1:
                reged = _CHECK_FUNCTION___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _CHECK_FUNCTION___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _CHECK_FUNCTION___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _CHECK_FUNCTION___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _CHECK_FUNCTION___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _CHECK_FUNCTION___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _START_EXECUTOR: {
            switch(curr_regs_in) {
                case 1:
                reged = _START_EXECUTOR___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _START_EXECUTOR___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _START_EXECUTOR___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _START_EXECUTOR___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _START_EXECUTOR___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _START_EXECUTOR___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _MAKE_WARM: {
            switch(curr_regs_in) {
                case 1:
                reged = _MAKE_WARM___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _MAKE_WARM___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _MAKE_WARM___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _MAKE_WARM___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _MAKE_WARM___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _MAKE_WARM___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _FATAL_ERROR: {
            switch(curr_regs_in) {
                case 1:
                reged = _FATAL_ERROR___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _FATAL_ERROR___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _FATAL_ERROR___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _FATAL_ERROR___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _FATAL_ERROR___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _FATAL_ERROR___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _DEOPT: {
            switch(curr_regs_in) {
                case 1:
                reged = _DEOPT___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _DEOPT___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _DEOPT___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _DEOPT___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _DEOPT___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _DEOPT___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _ERROR_POP_N: {
            switch(curr_regs_in) {
                case 1:
                reged = _ERROR_POP_N___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _ERROR_POP_N___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _ERROR_POP_N___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _ERROR_POP_N___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _ERROR_POP_N___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _ERROR_POP_N___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

        case _TIER2_RESUME_CHECK: {
            switch(curr_regs_in) {
                case 1:
                reged = _TIER2_RESUME_CHECK___CACHED_1in_1out;
                curr_regs_in = 1;
                break;
                case 2:
                reged = _TIER2_RESUME_CHECK___CACHED_2in_2out;
                curr_regs_in = 2;
                break;
                case 3:
                reged = _TIER2_RESUME_CHECK___CACHED_3in_3out;
                curr_regs_in = 3;
                break;
                case 4:
                reged = _TIER2_RESUME_CHECK___CACHED_4in_4out;
                curr_regs_in = 4;
                break;
                case 5:
                reged = _TIER2_RESUME_CHECK___CACHED_5in_5out;
                curr_regs_in = 5;
                break;
                case 6:
                reged = _TIER2_RESUME_CHECK___CACHED_6in_6out;
                curr_regs_in = 6;
                break;
                default: Py_UNREACHABLE();
            }
            break;
        }

#undef TIER_TWO
